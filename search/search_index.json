{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udded PyLAMP Program","text":"<p>Welcome to the PyLAMP Program! This course introduces you to fundamental concepts, tools, and practices in software engineering using the LAMP Stack. Use the outline below to navigate through the modules.</p>"},{"location":"#pylamp-program-project-list","title":"\ud83d\udcd8 PyLAMP Program Project List","text":""},{"location":"#month-1","title":"Month 1","text":""},{"location":"#week-1-projects","title":"Week 1 Projects","text":"<ul> <li>Overview</li> <li>Introduction to mindsets</li> <li>Preserving your mental health and network</li> <li>Owning your learning</li> <li>Maping your mind</li> <li>Setting up your local coding environment</li> <li>Version control with Git and GitHub</li> <li>Shell navigation</li> <li>Command Line Editors:<ul> <li>Vi or Vim</li> <li>emacs</li> </ul> </li> <li>Markdown</li> </ul>"},{"location":"#week-2-projects","title":"Week 2 Projects","text":"<ul> <li>0x00. Python - Hello, World</li> <li>0x01. Python - if/else, loops, functions</li> <li>Shell Basics</li> <li>Shell Permissions</li> </ul>"},{"location":"#week-3-projects","title":"Week 3 Projects","text":"<ul> <li>0x02. Python - import &amp; modules</li> <li>0x03. Python - Data Structures: Lists, Tuples</li> </ul>"},{"location":"#week-4-projects","title":"Week 4 Projects","text":"<ul> <li>0x05. Python - Exceptions</li> <li>0x06. Python - Classes and Objects</li> </ul>"},{"location":"#month-2","title":"Month 2","text":""},{"location":"#week-5-projects","title":"Week 5 Projects","text":"<ul> <li>0x09. Python - Everything is object</li> <li>0x0A. Python - Inheritance</li> </ul>"},{"location":"#week-6-projects","title":"Week 6 Projects","text":"<ul> <li>0x0B. Python - Input/Output</li> <li>0x0C. Python - Almost a circle</li> </ul>"},{"location":"#week-7-projects","title":"Week 7 Projects","text":"<ul> <li>0x00. AirBnB clone - The console</li> <li>0x0D. SQL - Introduction</li> </ul>"},{"location":"#week-8-projects","title":"Week 8 Projects","text":"<ul> <li>0x0E. SQL - More queries</li> <li>0x01. AirBnB clone - Web static</li> </ul>"},{"location":"#month-3","title":"Month 3","text":""},{"location":"#week-9-projects","title":"Week 9 Projects","text":"<ul> <li>0x12. JavaScript - Warm up</li> <li>0x13. JavaScript - Objects, Scopes and Closures</li> </ul>"},{"location":"#week-10-projects","title":"Week 10 Projects","text":"<ul> <li>0x0F. Python - Object-relational mapping</li> <li>0x02. AirBnB clone - MySQL</li> </ul>"},{"location":"#week-11-projects","title":"Week 11 Projects","text":"<ul> <li>0x10. Python - Network #0</li> <li>0x11. Python - Network #1</li> </ul>"},{"location":"#week-12-projects","title":"Week 12 Projects","text":"<ul> <li>0x03. AirBnB clone - Deploy static</li> <li>0x04. AirBnB clone - Web framework</li> </ul>"},{"location":"#month-4","title":"Month 4","text":""},{"location":"#week-13-projects","title":"Week 13 Projects","text":"<ul> <li>0x14. JavaScript - Web scraping</li> <li>0x05. AirBnB clone - RESTful API</li> </ul>"},{"location":"#week-14-projects","title":"Week 14 Projects","text":"<ul> <li>0x15. JavaScript - Web jQuery</li> <li>0x06. AirBnB clone - Web dynamic</li> </ul> <p>\ud83d\udca1 Tip: You can navigate using the sidebar or click any link above to go directly to a topic.</p>"},{"location":"Bash/0x00-shell_basics/","title":"Shell basics","text":"<p><code>DevOps</code> <code>Shell</code> <code>Bash</code></p>"},{"location":"Bash/0x00-shell_basics/#resources","title":"Resources:","text":"<p>Read or watch:</p> <ul> <li>What Is \u201cThe Shell\u201d?</li> <li>Navigation</li> <li>Looking Around</li> <li>A Guided Tour</li> <li>Manipulating Files</li> <li>Working With Commands</li> <li>Reading Man pages</li> <li>Keyboard shortcuts for Bash</li> <li>LTS</li> <li>Shebang</li> </ul> <p>man or help:</p> <ul> <li><code>cd</code></li> <li><code>ls</code></li> <li><code>pwd</code></li> <li><code>less</code></li> <li><code>file</code></li> <li><code>ln</code></li> <li><code>cp</code></li> <li><code>mv</code></li> <li><code>rm</code></li> <li><code>mkdir</code></li> <li><code>type</code></li> <li><code>which</code></li> <li><code>help</code></li> <li><code>man</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#learning-objectives","title":"Learning Objectives","text":"<p>General</p> <ul> <li>What does RTFM mean?</li> <li>What is a Shebang</li> </ul> <p>What is the Shell</p> <ul> <li>What is the shell</li> <li>What is the difference between a terminal and a shell</li> <li>What is the shell prompt</li> <li>How to use the history (the basics)</li> </ul> <p>Navigation</p> <ul> <li>What do the commands or built-ins <code>cd</code>, <code>pwd</code>, <code>ls</code> do</li> <li>How to navigate the filesystem</li> <li>What are the . and .. directories</li> <li>What is the working directory, how to print it and how to change it</li> <li>What is the root directory</li> <li>What is the home directory, and how to go there</li> <li>What is the difference between the root directory and the home directory of the user root</li> <li>What are the characteristics of hidden files and how to list them</li> <li>What does the command <code>cd</code> - do</li> </ul> <p>Looking Around</p> <ul> <li>What do the commands <code>ls</code>, <code>less</code>, <code>file</code> do</li> <li>How do you use options and arguments with commands</li> <li>Understand the ls long format and how to display it</li> <li>A Guided Tour</li> <li>What does the <code>ln</code> command do</li> <li>What do you find in the most common/important directories</li> <li>What is a symbolic link</li> <li>What is a hard link</li> <li>What is the difference between a hard link and a symbolic link</li> </ul> <p>Manipulating Files</p> <ul> <li>What do the commands <code>cp</code>, <code>mv</code>, <code>rm</code>, <code>mkdir</code> do</li> <li>What are wildcards and how do they work</li> <li>How to use wildcards</li> </ul> <p>Working with Commands</p> <ul> <li>What do <code>type</code>, <code>which</code>, <code>help</code>, <code>man</code> commands do</li> <li>What are the different kinds of commands</li> <li>What is an alias</li> <li>When do you use the command help instead of man</li> </ul> <p>Reading Man Pages</p> <ul> <li>How to read a man page</li> <li>What are man page sections</li> <li>What are the section numbers for User commands, System calls and Library functions</li> </ul> <p>Keyboard Shortcuts for Bash</p> <ul> <li>Common shortcuts for Bash</li> </ul> <p>LTS</p> <ul> <li>What does <code>LTS</code> mean?</li> </ul>"},{"location":"Bash/0x00-shell_basics/#requirements","title":"Requirements","text":""},{"location":"Bash/0x00-shell_basics/#general","title":"General","text":"<ul> <li>All your scripts should be exactly two lines long (<code>$ wc -l file</code> should print 2)</li> <li>All your files should end with a new line (why?)</li> <li>The first line of all your files should be exactly <code>#!/bin/bash</code></li> <li>A <code>README.md</code> file at the root of the repo, containing a description of the repository</li> <li>A <code>README.md</code> file, at the root of the folder of this project, describing what each script is doing</li> <li>You are not allowed to use backticks, <code>&amp;&amp;</code>, <code>||</code> or <code>;</code></li> <li>All your scripts must be executable. To make your file executable, use the <code>chmod</code> command: <code>chmod u+x file</code>. Later, we\u2019ll learn more about how to utilize this command.</li> </ul>"},{"location":"Bash/0x00-shell_basics/#more-info","title":"More Info","text":"<p>Example of line count and first line</p> <pre><code>exa@ubuntu:/tmp$ wc -l 12-file_type\n2 12-file_type\nexa@ubuntu:/tmp$ head -n 1 12-file_type\n#!/bin/bash\nexa@ubuntu:/tmp$\n</code></pre> <p>In order to test your scripts, you will need to use this command: <code>chmod u+x file</code>. We will see later what does <code>chmod</code> mean and do, but you can have a look at <code>man chmod</code> if you are curious.</p> <p>Example</p> <pre><code>exa@ubuntu:/tmp$ ls\n12-file_type\nlll\nexa@ubuntu:/tmp$ ls -la lll\n-rw-rw-r-- 1 exa exa 15 Sep 19 21:05 lll\nexa@ubuntu:/tmp$ cat lll\n#!/bin/bash\nls\nexa@ubuntu:/tmp$ ls -l lll\n-rw-rw-r-- 1 exa exa 15 Sep 19 21:05 lll\nexa@ubuntu:/tmp$ chmod u+x lll # you do not have to understand this yet\nexa@ubuntu:/tmp$ ls -l lll\n-rwxrw-r-- 1 exa exa 15 Sep 19 21:05 lll\nexa@ubuntu:/tmp$ ./lll\n12-file_type\nlll\nexa@ubuntu:/tmp$\n</code></pre>"},{"location":"Bash/0x00-shell_basics/#tasks","title":"Tasks","text":""},{"location":"Bash/0x00-shell_basics/#0-where-am-i","title":"0. Where am I?","text":"<p>Write a script that prints the absolute path name of the current working directory.</p> <p>Example:</p> <pre><code>$ ./0-current_working_directory\n/root/PyLAMP-Program_Projects/shell_basics\n$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>alx-higher_level_programming</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>0-current_working_directory</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#1-whats-in-there","title":"1. What\u2019s in there?","text":"<p>Write a script that displays the content list of your current directory.</p> <p>Example:</p> <pre><code>$ ./1-listit\nApplications    Documents   Dropbox Movies Pictures\nDesktop Downloads   Library Music Public\n$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>1-listit</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#2-there-is-no-place-like-home","title":"2. There is no place like home","text":"<p>Write a script that changes the working directory to the user\u2019s home directory.</p> <ul> <li>You are not allowed to use any shell variables</li> </ul> <pre><code>exa@ubuntu:/tmp$ pwd\n/tmp\nexa@ubuntu:/tmp$ echo $HOME\n/home/exa\nexa@ubuntu:/tmp$ source ./2-bring_me_home\nexa@ubuntu:~$ pwd\n/home/exa\nexa@ubuntu:~$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>2-bring_me_home</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#3-the-long-format","title":"3. The long format","text":"<p>Display current directory contents in a long format</p> <p>Example:</p> <pre><code>$ ./3-listfiles\ntotal 32\n-rwxr-xr-x@ 1 sylvain staff 18 Jan 25 00:19 0-current_working_directory\n-rwxr-xr-x@ 1 sylvain staff 19 Jan 25 00:23 1-listit\n-rwxr-xr-x@ 1 sylvain staff 18 Jan 25 00:29 2-bring_me_home\n-rwxr-xr-x@ 1 sylvain staff 18 Jan 25 00:39 3-listfiles\n$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>3-listfiles</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#4-hidden-files","title":"4. Hidden files","text":"<p>Display current directory contents, including hidden files (starting with .). Use the long format.</p> <p>Example:</p> <pre><code>$ ./4-listmorefiles\ntotal 32\ndrwxr-xr-x@ 6 sylvain staff 204 Jan 25 00:29 .\ndrwxr-xr-x@ 43 sylvain staff 1462 Jan 25 00:19 ..\n-rwxr-xr-x@ 1 sylvain staff 18 Jan 25 00:19 0-current_working_directory\n-rwxr-xr-x@ 1 sylvain staff 19 Jan 25 00:23 1-listit\n-rwxr-xr-x@ 1 sylvain staff 18 Jan 25 00:29 2-bring_me_home\n-rwxr-xr-x@ 1 sylvain staff 18 Jan 25 00:39 3-listfiles\n-rwxr-xr-x@ 1 sylvain staff 18 Jan 25 00:41 4-listmorefiles\n$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>4-listmorefiles</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#5-i-love-numbers","title":"5. I love numbers","text":"<p>Display current directory contents.</p> <ul> <li>Long format</li> <li>with user and group IDs displayed numerically</li> <li>And hidden files (starting with .)</li> </ul> <p>Example:</p> <pre><code>$ ./5-listfilesdigitonly\ntotal 32\ndrwxr-xr-x@ 6 501 20 204 Jan 25 00:29 .\ndrwxr-xr-x@ 43 501 20 1462 Jan 25 00:19 ..\n-rwxr-xr-x@ 1 501 20 18 Jan 25 00:19 0-current_working_directory\n-rwxr-xr-x@ 1 501 20 18 Jan 25 00:23 1-listfiles\n-rwxr-xr-x@ 1 501 20 19 Jan 25 00:29 2-bring_me_home\n-rwxr-xr-x@ 1 501 20 20 Jan 25 00:39 3-listfiles\n-rwxr-xr-x@ 1 501 20 18 Jan 25 00:41 4-listmorefiles\n-rwxr-xr-x@ 1 501 20 18 Jan 25 00:43 5-listfilesdigitonly\n$\n\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>5-listfilesdigitonly</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#6-welcome","title":"6. Welcome","text":"<p>Create a script that creates a directory named <code>my_first_directory</code> in the <code>/tmp/</code> directory.</p> <p>Example:</p> <pre><code>$ ./6-firstdirectory\n$ file /tmp/my_first_directory/\n/tmp/my_first_directory/: directory\n$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>6-firstdirectory</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#7-betty-in-my-first-directory","title":"7. Betty in my first directory","text":"<p>Move the file <code>betty</code> from <code>/tmp/</code> to <code>/tmp/my_first_directory</code>.</p> <p>Example:</p> <pre><code>$ ./7-movethatfile\n$ ls /tmp/my_first_directory/\nbetty\n$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>7-movethatfile</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#8-bye-bye-betty","title":"8. Bye bye Betty","text":"<p>Delete the file <code>betty</code>.</p> <ul> <li>The file <code>betty</code> is in <code>/tmp/my_first_directory</code> Example:</li> </ul> <pre><code>$ ./8-firstdelete\n$ ls /tmp/my_first_directory/\n$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>8-firstdelete</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#9-bye-bye-my-first-directory","title":"9. Bye bye My first directory","text":"<p>Delete the directory <code>my_first_directory</code> that is in the <code>/tmp</code> directory.</p> <p>Example:</p> <pre><code>$ ./9-firstdirdeletion\n$ file /tmp/my_first_directory\n/tmp/my_first_directory: cannot open `/tmp/my_first_directory' (No such file or directory)\n$\n</code></pre> <p>Tip: Python bytecode</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>9-firstdirdeletion</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#10-back-to-the-future","title":"10. Back to the future","text":"<p>Write a script that changes the working directory to the previous one.</p> <pre><code>exa@ubuntu:/tmp$ pwd\n/tmp\nexa@ubuntu:/tmp$ cd /var\nexa@ubuntu:/var$ pwd\n/var\nexa@ubuntu:/var$ source ./10-back\n/tmp\nexa@ubuntu:/tmp$ pwd\n/tmp\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>10-back</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#11-lists","title":"11. Lists","text":"<p>Write a script that lists all files (even ones with names beginning with a period character, which are normally hidden) in the current directory and the parent of the working directory and the /boot directory (in this order), in long format.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>11-lists</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#12-file-type","title":"12. File type","text":"<p>Write a script that prints the type of the file named <code>iamafile</code>. The file <code>iamafile</code> will be in the <code>/tmp</code> directory when we will run your script.</p> <p>Example</p> <pre><code>ubuntu@ip-172-31-63-244:~$ ./12-file_type\n/tmp/iamafile: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=bd39c07194a778ccc066fc963ca152bdfaa3f971, stripped\n</code></pre> <p>Note that depending on the file, the output of your script will be different.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>12-file_type</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#13-we-are-symbols-and-inhabit-symbols","title":"13. We are symbols, and inhabit symbols","text":"<p>Create a symbolic link to <code>/bin/ls</code>, named <code>__ls__</code>. The symbolic link should be created in the current working directory.</p> <pre><code>ubuntu@ip-172-31-63-244:/tmp/sym$ ls -la\ntotal 144\ndrwxrwxr-x  2 ubuntu ubuntu   4096 Sep 20 03:24 .\ndrwxrwxrwt 12 root   root   139264 Sep 20 03:24 ..\nubuntu@ip-172-31-63-244:/tmp/sym$./13-symbolic_link\nubuntu@ip-172-31-63-244:/tmp/sym$ ls -la\ntotal 144\ndrwxrwxr-x  2 ubuntu ubuntu   4096 Sep 20 03:24 .\ndrwxrwxrwt 12 root   root   139264 Sep 20 03:24 ..\nlrwxrwxrwx  1 ubuntu ubuntu      7 Sep 20 03:24 __ls__ -&gt; /bin/ls\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>13-symbolic_link</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#14-copy-html-files","title":"14. Copy HTML files","text":"<p>Create a script that copies all the HTML files from the current working directory to the parent of the working directory, but only copy files that did not exist in the parent of the working directory or were newer than the versions in the parent of the working directory.</p> <p>You can consider that all HTML files have the extension <code>.html</code></p> <pre><code>exa@ubuntu:/tmp$ pwd\n/tmp\nexa@ubuntu:/tmp$ cd /var\nexa@ubuntu:/var$ pwd\n/var\nexa@ubuntu:/var$ source ./10-back\n/tmp\nexa@ubuntu:/tmp$ pwd\n/tmp\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>14-copy_html</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#15-lets-move","title":"15. Let\u2019s move","text":"<p>Create a script that moves all files beginning with an uppercase letter to the directory <code>/tmp/u</code>.</p> <p>You can assume that the directory <code>/tmp/u</code> will exist when we will run your script</p> <pre><code>ubuntu@ip-172-31-63-244:/tmp/sym$ ls -la\ntotal 148\ndrwxrwxr-x  3 ubuntu ubuntu   4096 Sep 20 03:33 .\ndrwxrwxrwt 12 root   root   139264 Sep 20 03:26 ..\n-rw-rw-r--  1 ubuntu ubuntu      0 Sep 20 03:32 My_file\nlrwxrwxrwx  1 ubuntu ubuntu      7 Sep 20 03:24 __ls__ -&gt; /bin/ls\n-rw-rw-r--  1 ubuntu ubuntu      0 Sep 20 03:32 Elif_ym\n-rw-rw-r--  1 ubuntu ubuntu      0 Sep 20 03:32 random_file\nubuntu@ip-172-31-63-244:/tmp/sym$ ls -la /tmp/u\ntotal 8\ndrwxrwxr-x 2 ubuntu ubuntu 4096 Sep 20 03:33 .\ndrwxrwxr-x 3 ubuntu ubuntu 4096 Sep 20 03:33 ..\nubuntu@ip-172-31-63-244:/tmp/sym$ ./100-lets_move\nubuntu@ip-172-31-63-244:/tmp/sym$ ls -la\ntotal 148\ndrwxrwxr-x  3 ubuntu ubuntu   4096 Sep 20 03:33 .\ndrwxrwxrwt 12 root   root   139264 Sep 20 03:26 ..\nlrwxrwxrwx  1 ubuntu ubuntu      7 Sep 20 03:24 __ls__ -&gt; /bin/ls\n-rw-rw-r--  1 ubuntu ubuntu      0 Sep 20 03:32 random_file\nubuntu@ip-172-31-63-244:/tmp/sym$ ls -la /tmp/u\ntotal 8\ndrwxrwxr-x 2 ubuntu ubuntu 4096 Sep 20 03:33 .\ndrwxrwxr-x 3 ubuntu ubuntu 4096 Sep 20 03:33 ..\n-rw-rw-r-- 1 ubuntu ubuntu    0 Sep 20 03:32 My_file\n-rw-rw-r-- 1 ubuntu ubuntu    0 Sep 20 03:32 Elif_ym\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>100-lets_move</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#16-clean-emacs","title":"16. Clean Emacs","text":"<p>Create a script that deletes all files in the current working directory that end with the character <code>~</code>.</p> <pre><code>ubuntu@ip-172-31-63-244:/tmp/sym$ ls\nmain.c  main.c~  Makefile~\nubuntu@ip-172-31-63-244:/tmp/sym$ ./101-clean_emacs\nubuntu@ip-172-31-63-244:/tmp/emacs$ ls\nmain.c\nubuntu@ip-172-31-63-244:/tmp/emacs$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>101-clean_emacs</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#17-tree","title":"17. Tree","text":"<p>Create a script that creates the directories <code>welcome/</code>, <code>welcome/to/</code> and <code>welcome/to/school</code> in the current directory.</p> <p>You are only allowed to use two spaces (and lines) in your script, not more.</p> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 4\n-rwxrw-r-- 1 exa exa 44 Sep 20 12:09 102-tree\nexa@ubuntu:/tmp/h$ wc -l 102-tree\n2 102-tree\nexa@ubuntu:/tmp/h$ head -1 102-tree\n#!/bin/bash\nexa@ubuntu:/tmp/h$ tr -cd ' ' &lt; 102-tree | wc -c # you do not have to understand this yet, but the result should be 2, 1 or 0\n2\nexa@ubuntu:/tmp/h$ ./102-tree\nexa@ubuntu:/tmp/h$ ls\n102-tree  welcome\nexa@ubuntu:/tmp/h$ ls welcome/\nto\nexa@ubuntu:/tmp/h$ ls -l welcome/to\ntotal 4\ndrwxrwxr-x 2 exa exa 409\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>102-tree</code></li> </ul>"},{"location":"Bash/0x00-shell_basics/#18-life-is-a-series-of-commas-not-periods","title":"18. Life is a series of commas, not periods","text":"<p>Write a command that lists all the files and directories of the current directory, separated by commas (<code>,</code>).</p> <ul> <li>Directory names should end with a slash (<code>/</code>)</li> <li>Files and directories starting with a dot (<code>.</code>) should be listed</li> <li>The listing should be alpha ordered, except for the directories <code>.</code> and <code>..</code> which should be listed at the very beginning</li> <li>Only digits and letters are used to sort; Digits should come first</li> <li>You can assume that all the files we will test with will have at least one letter or one digit</li> <li>The listing should end with a new line</li> </ul> <pre><code>ubuntu@ubuntu:~/$ ls -a\n\n.  ..  0-commas  0-commas-checks  1-empty_casks  2-gifs  3-directories  4-zeros  5-rot13  6-odd  7-sort_rot13  Makefile  quote  .test  test_dir  test.var\n\nubuntu@ubuntu:~/$ ./103-commas\n\n./, ../, 0-commas, 0-commas-checks/, 1-empty_casks, 2-gifs, 3-directories, 4-zeros, 5-rot13, 6-odd, 7-sort_rot13, Makefile, quote, .test, test_dir/, test.var\n\nubuntu@ubuntu:~/$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_basics</code></li> <li>File: <code>103-commas</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/","title":"Shell permissions","text":"<p><code>DevOps</code> <code>Shell</code> <code>Bash</code></p>"},{"location":"Bash/0x01-shell_permissions/#resources","title":"Resources:","text":"<p>Read or watch:</p> <ul> <li>Permissions</li> </ul> <p>man or help:</p> <ul> <li>chmod</li> <li>sudo</li> <li>su</li> <li>chown</li> <li>chgrp</li> <li>id</li> <li>groups</li> <li>whoami</li> <li>adduser</li> <li>useradd</li> <li>addgroup</li> </ul>"},{"location":"Bash/0x01-shell_permissions/#learning-objectives","title":"Learning Objectives","text":"<p>Permissions</p> <ul> <li>What do the commands <code>chmod</code>, <code>sudo</code>, <code>su</code>, <code>chown</code>, <code>chgrp</code> do</li> <li>Linux file permissions</li> <li>How to represent each of the three sets of permissions (owner, group, and other) as a single digit</li> <li>How to change permissions, owner and group of a file</li> <li>Why can\u2019t a normal user <code>chown</code> a file</li> <li>How to run a command with root privileges</li> <li>How to change user ID or become superuser</li> </ul> <p>Other Man Pages</p> <ul> <li>How to create a user</li> <li>How to create a group</li> <li>How to print real and effective user and group IDs</li> <li>How to print the groups a user is in</li> <li>How to print the effective userid</li> </ul>"},{"location":"Bash/0x01-shell_permissions/#requirements","title":"Requirements","text":""},{"location":"Bash/0x01-shell_permissions/#general","title":"General","text":"<ul> <li>All your scripts should be exactly two lines long (<code>$ wc -l file</code> should print 2)</li> <li>All your files should end with a new line (why?)</li> <li>The first line of all your files should be exactly <code>#!/bin/bash</code></li> <li>A <code>README.md</code> file at the root of the repo, containing a description of the repository</li> <li>A <code>README.md</code> file, at the root of the folder of this project, describing what each script is doing</li> <li>You are not allowed to use backticks, <code>&amp;&amp;</code>, <code>||</code> or <code>;</code></li> <li>All your scripts must be executable. To make your file executable, use the <code>chmod</code> command: <code>chmod u+x file</code>. Later, we\u2019ll learn more about how to utilize this command.</li> </ul>"},{"location":"Bash/0x01-shell_permissions/#more-info","title":"More Info","text":"<p>Example of line count and first line</p> <pre><code>exa@ubuntu:/tmp$ wc -l 12-file_type\n2 12-file_type\nexa@ubuntu:/tmp$ head -n 1 12-file_type\n#!/bin/bash\nexa@ubuntu:/tmp$\n</code></pre> <p>In order to test your scripts, you will need to use this command: <code>chmod u+x file</code>. We will see later what does <code>chmod</code> mean and do, but you can have a look at <code>man chmod</code> if you are curious.</p> <p>Example</p> <pre><code>exa@ubuntu:/tmp$ ls\n12-file_type\nlll\nexa@ubuntu:/tmp$ ls -la lll\n-rw-rw-r-- 1 exa exa 15 Sep 19 21:05 lll\nexa@ubuntu:/tmp$ cat lll\n#!/bin/bash\nls\nexa@ubuntu:/tmp$ ls -l lll\n-rw-rw-r-- 1 exa exa 15 Sep 19 21:05 lll\nexa@ubuntu:/tmp$ chmod u+x lll # you do not have to understand this yet\nexa@ubuntu:/tmp$ ls -l lll\n-rwxrw-r-- 1 exa exa 15 Sep 19 21:05 lll\nexa@ubuntu:/tmp$ ./lll\n12-file_type\nlll\nexa@ubuntu:/tmp$\n</code></pre>"},{"location":"Bash/0x01-shell_permissions/#tasks","title":"Tasks","text":""},{"location":"Bash/0x01-shell_permissions/#0-my-name-is-betty","title":"0. My name is Betty","text":"<p>Create a script that switches the current user to the user <code>betty</code>.</p> <ul> <li>You should use exactly 8 characters for your command (+1 character for the new line)</li> <li>You can assume that the user <code>betty</code> will exist when we will run your script</li> </ul> <pre><code>exa@ubuntu:/tmp/h$ tail -1 0-iam_betty | wc -c\n9\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>0-iam_betty</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#1-who-am-i","title":"1. Who am I","text":"<p>Write a script that prints the effective username of the current user.</p> <pre><code>exa@ubuntu:/tmp/h$ ./1-who_am_i\nexa\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>1-who_am_i</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#2-groups","title":"2. Groups","text":"<p>Write a script that prints all the groups the current user is part of.</p> <pre><code>exa@ubuntu:/tmp/h$ ./2-groups\nexa adm cdrom sudo dip plugdev lpadmin sambashare\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Note: depending on the user, you will get a different output.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>2-groups</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#3-new-owner","title":"3. New owner","text":"<p>Write a script that changes the owner of the file <code>hello</code> to the user <code>betty</code>.</p> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 4\n-rwxrw-r-- 1 exa exa 30 Sep 20 14:23 3-new_owner\n-rw-rw-r-- 1 exa exa  0 Sep 20 14:18 hello\nexa@ubuntu:/tmp/h$ sudo ./3-new_owner\nexa@ubuntu:/tmp/h$ ls -l\ntotal 4\n-rwxrw-r-- 1 exa exa 30 Sep 20 14:23 3-new_owner\n-rw-rw-r-- 1 betty  exa  0 Sep 20 14:18 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>3-new_owner</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#4-empty","title":"4. Empty!","text":"<p>Write a script that creates an empty file called <code>hello</code>.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>4-empty</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#5-execute","title":"5. Execute","text":"<p>Write a script that adds execute permission to the owner of the file <code>hello</code>.</p> <ul> <li>The file <code>hello</code> will be in the working directory</li> </ul> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 28 Sep 20 14:26 5-execute\n-rw-rw-r-- 1 exa exa 23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ ./hello\nbash: ./hello: Permission denied\nexa@ubuntu:/tmp/h$ ./5-execute\nexa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 28 Sep 20 14:26 5-execute\n-rwxrw-r-- 1 exa exa 23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>5-execute</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#6-multiple-permissions","title":"6. Multiple permissions","text":"<p>Write a script that adds execute permission to the owner and the group owner, and read permission to other users, to the file <code>hello</code>.</p> <ul> <li>The file <code>hello</code> will be in the working directory</li> </ul> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 36 Sep 20 14:31 6-multiple_permissions\n-r--r----- 1 exa exa 23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ ./6-multiple_permissions\nexa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 36 Sep 20 14:31 6-multiple_permissions\n-r-xr-xr-- 1 exa exa 23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>6-multiple_permissions</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#7-everybody","title":"7. Everybody!","text":"<p>Write a script that adds execution permission to the owner, the group owner and the other users, to the file <code>hello</code></p> <ul> <li>The file <code>hello</code> will be in the working directory</li> <li>You are not allowed to use commas for this script</li> </ul> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 28 Sep 20 14:35 7-everybody\n-rw-r----- 1 exa exa 23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ ./7-everybody\nexa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 28 Sep 20 14:35 7-everybody\n-rwxr-x--x 1 exa exa 23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>7-everybody</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#8-james-bond","title":"8. James Bond","text":"<p>Write a script that sets the permission to the file <code>hello</code> as follows:</p> <ul> <li>Owner: no permission at all</li> <li>Group: no permission at all</li> <li>Other users: all the permissions</li> <li>The file <code>hello</code> will be in the working directory You are not allowed to use commas for this script</li> </ul> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 28 Sep 20 14:40 8-James_Bond\n-rwxr-x--x 1 exa exa 23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ ./8-James_Bond\nexa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 28 Sep 20 14:40 8-James_Bond\n-------rwx 1 exa exa 23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>8-James_Bond</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#9-john-doe","title":"9. John Doe","text":"<p>Write a script that sets the mode of the file <code>hello</code> to this:</p> <pre><code>-rwxr-x-wx 1 exa exa 23 Sep 20 14:25 hello\n</code></pre> <ul> <li>The file <code>hello</code> will be in the working directory</li> <li>You are not allowed to use commas for this script</li> </ul> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>9-John_Doe</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#10-look-in-the-mirror","title":"10. Look in the mirror","text":"<p>Write a script that sets the mode of the file hello the same as olleh\u2019s mode.</p> <ul> <li>The file <code>hello</code> will be in the working directory</li> <li>The file <code>olleh</code> will be in the working directory</li> </ul> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 42 Sep 20 14:45 10-mirror_permissions\n-rwxr-x-wx 1 exa exa 23 Sep 20 14:25 hello\n-rw-rw-r-- 1 exa exa  0 Sep 20 14:43 olleh\nexa@ubuntu:/tmp/h$ ./10-mirror_permissions\nexa@ubuntu:/tmp/h$ ls -l\ntotal 8\n-rwxrw-r-- 1 exa exa 42 Sep 20 14:45 10-mirror_permissions\n-rw-rw-r-- 1 exa exa 23 Sep 20 14:25 hello\n-rw-rw-r-- 1 exa exa  0 Sep 20 14:43 olleh\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Note: the mode of <code>olleh</code> will not always be 664. Make sure your script works for any mode.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>10-mirror_permissions</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#11-directories","title":"11. Directories","text":"<p>Create a script that adds execute permission to all subdirectories of the current directory for the owner, the group owner and all other users.</p> <p>Regular files should not be changed.</p> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 20\n-rwxrwxr-x 1 exa exa   24 Sep 20 14:53 11-directories_permissions\ndrwx------ 2 exa exa 4096 Sep 20 14:49 dir0\ndrwx------ 2 exa exa 4096 Sep 20 14:49 dir1\ndrwx------ 2 exa exa 4096 Sep 20 14:49 dir2\n-rw-rw-r-- 1 exa exa   23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ ./11-directories_permissions\nexa@ubuntu:/tmp/h$ ls -l\ntotal 20\n-rwxrwxr-x 1 exa exa   24 Sep 20 14:53 11-directories_permissions\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir0\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir1\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir2\n-rw-rw-r-- 1 exa exa   23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>11-directories_permissions</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#12-more-directories","title":"12. More directories","text":"<p>Create a script that creates a directory called <code>my_dir</code> with permissions 751 in the working directory.</p> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 20\n-rwxrwxr-x 1 exa exa   39 Sep 20 14:59 12-directory_permissions\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir0\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir1\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir2\n-rw-rw-r-- 1 exa exa   23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ ./12-directory_permission s\nexa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 exa exa   39 Sep 20 14:59 12-directory_permissions\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir0\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir1\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir2\ndrwxr-x--x 2 exa exa 4096 Sep 20 14:59 my_dir\n-rw-rw-r-- 1 exa exa   23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>12-directory_permissions</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#13-change-group","title":"13. Change group","text":"<p>Write a script that changes the group owner to <code>school</code> for the file <code>hello</code></p> <p>The file <code>hello</code> will be in the working directory</p> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 exa exa   34 Sep 20 15:03 13-change_group\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir0\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir1\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir2\ndrwxr-x--x 2 exa exa 4096 Sep 20 14:59 my_dir\n-rw-rw-r-- 1 exa exa   23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ sudo ./13-change_group\nexa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 exa exa      34 Sep 20 15:03 13-change_group\ndrwx--x--x 2 exa exa    4096 Sep 20 14:49 dir0\ndrwx--x--x 2 exa exa    4096 Sep 20 14:49 dir1\ndrwx--x--x 2 exa exa    4096 Sep 20 14:49 dir2\ndrwxr-x--x 2 exa exa    4096 Sep 20 14:59 my_dir\n-rw-rw-r-- 1 exa school   23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>13-change_group</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#14-owner-and-group","title":"14. Owner and group","text":"<p>Write a script that changes the owner to <code>vincent</code> and the group owner to <code>staff</code> for all the files and directories in the working directory.</p> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 exa exa   36 Sep 20 15:06 100-change_owner_and_group\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir0\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir1\ndrwx--x--x 2 exa exa 4096 Sep 20 14:49 dir2\ndrwxr-x--x 2 exa exa 4096 Sep 20 14:59 my_dir\n-rw-rw-r-- 1 exa exa   23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ sudo ./100-change_owner_and_group\nexa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 vincent staff   36 Sep 20 15:06 100-change_owner_and_group\ndrwx--x--x 2 vincent staff 4096 Sep 20 14:49 dir0\ndrwx--x--x 2 vincent staff 4096 Sep 20 14:49 dir1\ndrwx--x--x 2 vincent staff 4096 Sep 20 14:49 dir2\ndrwxr-x--x 2 vincent staff 4096 Sep 20 14:59 my_dir\n-rw-rw-r-- 1 vincent staff   23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>100-change_owner_and_group</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#15-symbolic-links","title":"15. Symbolic links","text":"<p>Write a script that changes the owner and the group owner of <code>_hello</code> to <code>vincent</code> and <code>staff</code> respectively.</p> <p>The file <code>_hello</code> is in the working directory The file <code>_hello</code> is a symbolic link</p> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 exa exa   44 Sep 20 15:12 101-symbolic_link_permissions\n-rw-rw-r-- 1 exa exa   23 Sep 20 14:25 hello\nlrwxrwxrwx 1 exa exa    5 Sep 20 15:10 _hello -&gt; hello\nexa@ubuntu:/tmp/h$ sudo ./101-symbolic_link_permissions\nexa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 exa exa      44 Sep 20 15:12 101-symbolic_link_permissions\n-rw-rw-r-- 1 exa exa      23 Sep 20 14:25 hello\nlrwxrwxrwx 1 vincent  staff    5 Sep 20 15:10 _hello -&gt; hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>101-symbolic_link_permissions</code></li> </ul>"},{"location":"Bash/0x01-shell_permissions/#16-if-only","title":"16. If only","text":"<p>Write a script that changes the owner of the file <code>hello</code> to <code>betty</code> only if it is owned by the user exa.</p> <ul> <li>The file <code>hello</code> will be in the working directory</li> </ul> <pre><code>exa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 exa    exa      47 Sep 20 15:18 102-if_only\n-rw-rw-r-- 1 exa exa      23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$ sudo ./102-if_only\nexa@ubuntu:/tmp/h$ ls -l\ntotal 24\n-rwxrwxr-x 1 exa exa      47 Sep 20 15:18 102-if_only\n-rw-rw-r-- 1 betty  exa      23 Sep 20 14:25 hello\nexa@ubuntu:/tmp/h$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>shell_permissions</code></li> <li>File: <code>102-if_only</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/","title":"0x00. Python - Hello, World","text":"<p><code>Python</code></p>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#overview","title":"Overview","text":"<p>This project dives into the concept of python programing and introduces learner to a project based approach of learning. Learners should make sure to go through each instruction before going into the project tasks</p>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#resources","title":"Resources:","text":"<ul> <li>More Control Flow Tools (Read until \u201c4.6. Defining Functions\u201d included)</li> <li>IndentationError</li> <li>How To Use String Formatters in Python 3</li> <li>Learn to Program</li> <li>Learn to Program 2 : Looping</li> <li>Pycodestyle \u2013 Style Guide for Python Code</li> </ul> <p>man or help: <code>python3</code></p>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Why Python programming is awesome</li> <li>Why indentation is so important in Python</li> <li>How to use the if, if ... else statements</li> <li>How to use comments</li> <li>How to affect values to variables</li> <li>How to use the while and for loops</li> <li>How is Python\u2019s for different from C\u2018s?</li> <li>How to use the break and continues statements</li> <li>How to use else clauses on loops</li> <li>What does the pass statement do, and when to use it</li> <li>How to use range</li> <li>What is a function and how do you use functions</li> <li>What does return a function that does not use any return statement</li> <li>Scope of variables</li> <li>What\u2019s a traceback</li> <li>What are the arithmetic operators and how to use them</li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#requirements","title":"Requirements","text":""},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#python-scripts","title":"Python scripts","text":"<ul> <li>Your code should use the pycodestyle</li> <li>All your files must be executable</li> <li>All your files should end with a new line</li> <li>The first line of all your files should be exactly <code>#!/usr/bin/python3</code></li> <li>A <code>README.md</code> file at the root of the repo, containing a description of the repository</li> <li>A <code>README.md</code> file, at the root of the folder of this project, is mandatory</li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#more-info","title":"More Info","text":""},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#pycodestyle","title":"Pycodestyle","text":"<p>Pycodestyle is now the new standard of Python style code</p>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#tasks","title":"Tasks","text":""},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#0-positive-anything-is-better-than-negative-nothing","title":"0. Positive anything is better than negative nothing","text":"<p>This program will assign a random signed number to the variable <code>number</code> each time it is executed. Complete the source code in order to print whether the number stored in the variable number is positive or negative.</p> <ul> <li>You can find the source code here</li> <li>The variable <code>number</code> will store a different value every time you will run this program</li> <li>You don\u2019t have to understand what <code>import</code>, <code>random</code>. <code>randint</code> do. Please do not touch this code</li> <li>The output of the program should be:<ul> <li>The number, followed by<ul> <li>if the number is greater than 0: <code>is positive</code></li> <li>if the number is 0: <code>is zero</code></li> <li>if the number is less than 0: <code>is negative</code></li> </ul> </li> <li>followed by a new line</li> </ul> </li> </ul> <pre><code>exa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n-4 is negative\nexa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n0 is zero\nexa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n-3 is negative\nexa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n-10 is negative\nexa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n10 is positive\nexa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n-5 is negative\nexa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n6 is positive\nexa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n7 is positive\nexa@ubuntu:~/0x01$ ./0-positive_or_negative.py\n5 is positive\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x01-python-if_else_loops_functions</code> - File: <code>0-positive_or_negative.py</code></p>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#1-the-last-digit","title":"1. The last digit","text":"<p>This program will assign a random signed number to the variable <code>number</code> each time it is executed. Complete the source code in order to print the last digit of the number stored in the variable <code>number</code>.</p> <ul> <li>You can find the source code here</li> <li>The variable number will store a different value every time you will run this program</li> <li>You don\u2019t have to understand what <code>import</code>, <code>random.randint</code> do. Please do not touch this code. This line should not change: <code></code></li> <li>The output of the program should be:<ul> <li>The string <code>Last digit of</code>, followed by</li> <li>the number, followed by</li> <li>the string <code>is</code>, followed by the last digit of <code>number</code>, followed by<ul> <li>if the last digit is greater than 5: the string <code>and is greater than 5</code></li> <li>if the last digit is 0: the string <code>and is 0</code></li> <li>if the last digit is less than 6 and not 0: the string <code>and is less than 6 and not 0</code></li> </ul> </li> <li>followed by a new line</li> </ul> </li> </ul> <pre><code>exa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of 4205 is 5 and is less than 6 and not 0\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of -626 is -6 and is less than 6 and not 0\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of 1144 is 4 and is less than 6 and not 0\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of -9200 is 0 and is 0\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of 5247 is 7 and is greater than 5\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of -9318 is -8 and is less than 6 and not 0\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of 3369 is 9 and is greater than 5\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of -5224 is -4 and is less than 6 and not 0\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of -4485 is -5 and is less than 6 and not 0\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of 3850 is 0 and is 0\nexa@ubuntu:~/0x01$ ./1-last_digit.py\nLast digit of 5169 is 9 and is greater than 5\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>1-last_digit.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#2-i-sometimes-suffer-from-insomnia-and-when-i-cant-fall-asleep-i-play-what-i-call-the-alphabet-game","title":"2. I sometimes suffer from insomnia. And when I can't fall asleep, I play what I call the alphabet game","text":"<p>Write a program that prints the ASCII alphabet, in lowercase, not followed by a new line.</p> <ul> <li>You can only use one <code>print</code> function with string format</li> <li>You can only use one loop in your code</li> <li>You are not allowed to store characters in a variable</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x01$ ./2-print_alphabet.py\nabcdefghijklmnopqrstuvwxyzPyLAMP@ubuntu:~/0x01$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>2-print_alphabet.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#3-when-i-was-having-that-alphabet-soup-i-never-thought-that-it-would-pay-off","title":"3. When I was having that alphabet soup, I never thought that it would pay off","text":"<p>Write a program that prints the ASCII alphabet, in lowercase, not followed by a new line.</p> <ul> <li>Print all the letters except <code>q</code> and <code>e</code></li> <li>You can only use one <code>print</code> function with string format</li> <li>You can only use one loop in your code</li> <li>You are not allowed to store characters in a variable</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x01$ ./3-print_alphabt.py\nabcdfghijklmnoprstuvwxyzPyLAMP@ubuntu:~/0x01$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>3-print_alphabet.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#4-hexadecimal-printing","title":"4. Hexadecimal printing","text":"<p>Write a program that prints all numbers from <code>0</code> to <code>98</code> in decimal and in hexadecimal (as in the following example)</p> <ul> <li>You can only use one <code>print</code> function with string format</li> <li>You can only use one loop in your code</li> <li>You are not allowed to store numbers or strings in a variable</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x01$ ./4-print_hexa.py\n0 = 0x0\n1 = 0x1\n2 = 0x2\n3 = 0x3\n4 = 0x4\n5 = 0x5\n6 = 0x6\n7 = 0x7\n8 = 0x8\n9 = 0x9\n10 = 0xa\n11 = 0xb\n12 = 0xc\n13 = 0xd\n14 = 0xe\n15 = 0xf\n16 = 0x10\n17 = 0x11\n18 = 0x12\n...\n96 = 0x60\n97 = 0x61\n98 = 0x62\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>4-print_hexa.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#5-0099","title":"5. 00...99","text":"<p>Write a program that prints numbers from <code>0</code> to <code>99</code>.</p> <ul> <li>Numbers must be separated by <code>,</code>, followed by a space</li> <li>Numbers should be printed in ascending order, with two digits</li> <li>The last number should be followed by a new line</li> <li>You can only use no more than 2 <code>print</code> functions with string format</li> <li>You can only use one loop in your code</li> <li>You are not allowed to store numbers or strings in a variable</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x01$ ./5-print_comb2.py\n00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>5-print_comb2.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#6-inventing-is-a-combination-of-brains-and-materials-the-more-brains-you-use-the-less-material-you-need","title":"6. Inventing is a combination of brains and materials. The more brains you use, the less material you need","text":"<p>Write a program that prints all possible different combinations of two digits.</p> <ul> <li>Numbers must be separated by <code>,</code>, followed by a space</li> <li>The two digits must be different</li> <li><code>01</code> and <code>10</code> are considered the same combination of the two digits 0 and 1</li> <li>Print only the smallest combination of two digits</li> <li>Numbers should be printed in ascending order, with two digits</li> <li>The last number should be followed by a new line</li> <li>You can only use no more than 3 <code>print</code> functions with string format</li> <li>You can only use no more than 2 loops in your code</li> <li>You are not allowed to store numbers or strings in a variable</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x01$ ./6-print_comb3.py\n01, 02, 03, 04, 05, 06, 07, 08, 09, 12, 13, 14, 15, 16, 17, 18, 19, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 38, 39, 45, 46, 47, 48, 49, 56, 57, 58, 59, 67, 68, 69, 78, 79, 89\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>6-print_comb3.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#7-islower","title":"7. islower","text":"<p>Write a function that checks for lowercase character.</p> <ul> <li>Prototype: <code>def islower(c):</code></li> <li>Returns <code>True</code> if <code>c</code> is lowercase</li> <li>Returns <code>False</code> otherwise</li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>str.upper()</code> and <code>str.isupper()</code></li> <li>Tips: ord()</li> </ul> <p>You don\u2019t need to understand __import__</p> <pre><code>exa@ubuntu:~/0x01$ cat 7-main.py\n#!/usr/bin/env python3\nislower = __import__('7-islower').islower\n\nprint(\"a is {}\".format(\"lower\" if islower(\"a\") else \"upper\"))\nprint(\"H is {}\".format(\"lower\" if islower(\"H\") else \"upper\"))\nprint(\"A is {}\".format(\"lower\" if islower(\"A\") else \"upper\"))\nprint(\"3 is {}\".format(\"lower\" if islower(\"3\") else \"upper\"))\nprint(\"g is {}\".format(\"lower\" if islower(\"g\") else \"upper\"))\n\nexa@ubuntu:~/0x01$ ./7-main.py\na is lower\nH is upper\nA is upper\n3 is upper\ng is lower\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x01-python-if_else_loops_functions</code> - File: <code>7-islower.py</code></p>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#8-to-uppercase","title":"8. To uppercase","text":"<p>Write a function that prints a string in uppercase followed by a new line.</p> <ul> <li>Prototype: <code>def uppercase(str):</code></li> <li>You can only use no more than 2 <code>print</code> functions with string format</li> <li>You can only use one loop in your code</li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>str.upper()</code> and <code>str.isupper()</code></li> <li>Tips: ord()</li> </ul> <p>You don\u2019t need to understand __import__</p> <pre><code>exa@ubuntu:~/0x01$ cat 8-main.py\n#!/usr/bin/env python3\nuppercase = __import__('8-uppercase').uppercase\n\nuppercase(\"best\")\nuppercase(\"Best School 98 Battery street\")\n\nexa@ubuntu:~/0x01$ ./8-main.py\nBEST\nBEST SCHOOL 98 BATTERY STREET\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x01-python-if_else_loops_functions</code> - File: <code>8-uppercase.py</code></p>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#9-there-are-only-3-colors-10-digits-and-7-notes-its-what-we-do-with-them-thats-important","title":"9. There are only 3 colors, 10 digits, and 7 notes; it's what we do with them that's important","text":"<p>Write a function that prints the last digit of a number.</p> <ul> <li>Prototype: <code>def print_last_digit(number):</code></li> <li>Returns the value of the last digit</li> <li>You are not allowed to import any module</li> </ul> <p>You don\u2019t need to understand __import__</p> <pre><code>exa@ubuntu:~/0x01$ cat 9-main.py\n#!/usr/bin/env python3\nprint_last_digit = __import__('9-print_last_digit').print_last_digit\n\nprint_last_digit(98)\nprint_last_digit(0)\nr = print_last_digit(-1024)\nprint(r)\n\nexa@ubuntu:~/0x01$ ./9-main.py\n8044\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>9-print_last_digit.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#10-a-b","title":"10.  a + b","text":"<p>Write a function that adds two integers and returns the result.</p> <ul> <li>Prototype: <code>def add(a, b):</code></li> <li>Returns the value of <code>a + b</code></li> <li>You are not allowed to import any module</li> </ul> <p>You don\u2019t need to understand __import__</p> <pre><code>exa@ubuntu:~/0x01$ cat 10-main.py\n#!/usr/bin/env python3\nadd = __import__('10-add').add\n\nprint(add(1, 2))\nprint(add(98, 0))\nprint(add(100, -2))\n\nexa@ubuntu:~/0x01$ ./10-main.py\n3\n98\n98\nexa@ubuntu:~/0x01$\n</code></pre> <p>Solving a problem is already a big win! but finding the best and optimal way to solve it, it\u2019s way better! Think about the most optimal / fastest way to do it.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>10-add.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#11-a-b","title":"11. a ^ b","text":"<p>Write a function that computes a to the power of b and return the value.</p> <ul> <li>Prototype: <code>def pow(a, b):</code></li> <li>Returns the value of <code>a ^ b</code></li> <li>You are not allowed to import any module</li> </ul> <p>You don\u2019t need to understand __import__</p> <pre><code>exa@ubuntu:~/0x01$ cat 11-main.py\n#!/usr/bin/env python3\npow = __import__('11-pow').pow\n\nprint(pow(2, 2))\nprint(pow(98, 2))\nprint(pow(98, 0))\nprint(pow(100, -2))\nprint(pow(-4, 5))\n\nexa@ubuntu:~/0x01$ ./11-main.py\n4\n9604\n1\n0.0001\n-1024\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>11-pow.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#12-fizz-buzz","title":"12. Fizz Buzz","text":"<p>Write a function that prints the numbers from 1 to 100 separated by a space.</p> <ul> <li>For multiples of three print <code>Fizz</code> instead of the number and for multiples of five print <code>Buzz</code>.</li> <li>For numbers which are multiples of both three and five print <code>FizzBuzz</code>.</li> <li>Prototype: <code>def fizzbuzz():</code></li> <li>Each element should be followed by a space</li> <li>You are not allowed to import any module</li> </ul> <p>You don\u2019t need to understand __import__</p> <pre><code>exa@ubuntu:~/0x01$ cat 12-main.py\n#!/usr/bin/env python3\nfizzbuzz = __import__('12-fizzbuzz').fizzbuzz\n\nfizzbuzz()\nprint(\"\")\n\nexa@ubuntu:~/0x01$ ./12-main.py | cat -e\n1 2 Fizz 4 Buzz Fizz 7 8 Fizz Buzz 11 Fizz 13 14 FizzBuzz 16 17 Fizz 19 Buzz Fizz 22 23 Fizz Buzz 26 Fizz 28 29 FizzBuzz 31 32 Fizz 34 Buzz Fizz 37 38 Fizz Buzz 41 Fizz 43 44 FizzBuzz 46 47 Fizz 49 Buzz Fizz 52 53 Fizz Buzz 56 Fizz 58 59 FizzBuzz 61 62 Fizz 64 Buzz Fizz 67 68 Fizz Buzz 71 Fizz 73 74 FizzBuzz 76 77 Fizz 79 Buzz Fizz 82 83 Fizz Buzz 86 Fizz 88 89 FizzBuzz 91 92 Fizz 94 Buzz Fizz 97 98 Fizz Buzz $\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x01-python-if_else_loops_functions</code></li> <li>File: <code>12-fizzbuzz.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#13-smile-in-the-mirror","title":"13. Smile in the mirror","text":"<p>Write a program that prints the ASCII alphabet, in reverse order, alternating lowercase and uppercase (<code>z</code> in lowercase and <code>Y</code> in uppercase) , not followed by a new line.</p> <ul> <li>You can only use one <code>print</code> function with string format</li> <li>You can only use one loop in your code</li> <li>You are not allowed to store characters in a variable</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x01$ ./100-print_tebahpla.py\nzYxWvUtSrQpOnMlKjIhGfEdCbAPyLAMP@ubuntu:~/0x01$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x01-python-if_else_loops_functions</code> - File: <code>100-print_tebahpla.py</code></p>"},{"location":"Higher-level_programming/Python/0x00-Python-Hello_World/#15-remove-at-position","title":"15. Remove at position","text":"<p>Write a function that creates a copy of the string, removing the character at the position <code>n</code> (not the Python way, the \u201cC array index\u201d).</p> <ul> <li>Prototype: <code>def remove_char_at(str, n):</code></li> <li>You are not allowed to import any module</li> </ul> <p>You don\u2019t need to understand __import__</p> <pre><code>exa@ubuntu:~/0x01$ cat 101-main.py\n#!/usr/bin/env python3\nremove_char_at = __import__('101-remove_char_at').remove_char_at\n\nprint(remove_char_at(\"Best School\", 3))\nprint(remove_char_at(\"Chicago\", 2))\nprint(remove_char_at(\"C is fun!\", 0))\nprint(remove_char_at(\"School\", 10))\nprint(remove_char_at(\"Python\", -2))\n\nexa@ubuntu:~/0x01$ ./101-main.py\nBes School\nChcago\n is fun!\nSchool\nPython\nexa@ubuntu:~/0x01$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x01-python-if_else_loops_functions</code> - File: <code>101-remove_char_at.py</code></p>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/","title":"0x01. Python - if/else, loops, functions","text":"<p><code>Python</code></p>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#overview","title":"Overview","text":"<p>This project introduces learners to the control structures in Python and functionl programming using python. Learners should make sure to go through each instruction before going into the project tasks</p>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#resources","title":"Resources:","text":"<ul> <li>The Python tutorial (only the first three chapters below)</li> <li>Whetting Your Appetite</li> <li>Using the Python Interpreter</li> <li>An Informal Introduction to Python (Read up until \u201c3.1.2. Strings\u201d included)</li> <li>How To Use String Formatters in Python 3</li> <li>Learn to Program</li> <li>Pycodestyle \u2013 Style Guide for Python Code</li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Why Python programming is awesome</li> <li>Who created Python</li> <li>Who is Guido van Rossum</li> <li>Where does the name \u2018Python\u2019 come from</li> <li>What is the Zen of Python</li> <li>How to use the Python interpreter</li> <li>How to print text and variables using <code>print</code></li> <li>How to use strings</li> <li>What are indexing and slicing in Python</li> <li>What is the official Python coding style and how to check your code with <code>pycodestyle</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#requirements","title":"Requirements","text":""},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#python-scripts","title":"Python scripts","text":"<ul> <li>Your code should use the pycodestyle</li> <li>All your files must be executable</li> <li>All your files should end with a new line</li> <li>The first line of all your files should be exactly #!/usr/bin/python3</li> <li>A <code>README.md</code> file at the root of the repo, containing a description of the repository</li> <li>A <code>README.md</code> file, at the root of the folder of this project, is mandatory</li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#shell-scripts","title":"Shell scripts","text":"<ul> <li>All your scripts should be exactly two lines long (wc -l file should print 2)</li> <li>All your files should end with a new line</li> <li>The first line of all your files should be exactly #!/bin/bash</li> <li>All your files must be executable</li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#more-info","title":"More Info","text":"<p>Zen</p> <pre><code>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!`\n</code></pre>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#pycodestyle","title":"Pycodestyle","text":"<p>Pycodestyle is now the new standard of Python style code</p>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#tasks","title":"Tasks","text":""},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#0-a-python-shell","title":"0. A Python shell","text":"<p>Write a Shell script that runs a Python script.</p> <p>The Python file name will be saved in the environment variable <code>$PYFILE</code></p> <pre><code>exa@ubuntu:~/py/0x00$ cat main.py\n#!/usr/bin/python3\nprint(\"Best School\")\n\nexa@ubuntu:~/py/0x00$ export PYFILE=main.py\nexa@ubuntu:~/py/0x00$ ./0-run\nBest School\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>0-run</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#1-a-python-code-shell","title":"1. A Python code shell","text":"<p>Write a Shell script that runs Python code.</p> <p>The Python code will be saved in the environment variable <code>$PYCODE</code></p> <pre><code>exa@ubuntu:~/py/0x00$ export PYCODE='print(f\"Best School: {88+10}\")'\nexa@ubuntu:~/py/0x00$ ./1-run_inline\nBest School: 98\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>1-run_inline</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#2-print-string-with-quotes","title":"2. Print string with quotes","text":"<p>Write a Python script that prints exactly <code>\"Programming is like building a multilingual puzzle,</code> followed by a new line.</p> <ul> <li>Use the function print</li> </ul> <pre><code>exa@ubuntu:~/py/0x00$ ./2-print.py\n\"Programming is like building a multilingual puzzle\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>2-print.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#3-print-integer","title":"3. Print integer","text":"<p>Complete the source code in order to print the integer stored in the variable <code>number</code>, followed by <code>Battery street</code>, followed by a new line.</p> <ul> <li>You can find the source code here</li> <li>The output of the script should be:<ul> <li>the number, followed by <code>Battery street</code>,</li> <li>followed by a new line</li> </ul> </li> <li>You are not allowed to cast the variable <code>number</code> into a string</li> <li>Your code must be 3 lines long</li> <li>You have to use f-strings tips</li> </ul> <pre><code>exa@ubuntu:~/py/0x00$ ./3-print_number.py\n98 Battery street\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>3-print_number.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#4-print-float","title":"4. Print float","text":"<p>Complete the source code in order to print the float stored in the variable <code>number</code> with a precision of 2 digits.</p> <ul> <li>You can find the source code here</li> <li>The output of the program should be:<ul> <li><code>Float:</code>, followed by the float with only 2 digits</li> <li>followed by a new line</li> </ul> </li> <li>You are not allowed to cast <code>number</code> to string</li> <li>You have to use f-strings</li> </ul> <pre><code>exa@ubuntu:~/py/0x00$ ./4-print_float.py\nFloat: 3.14\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>4-print_float.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#5-print-string","title":"5. Print string","text":"<p>Complete the source code in order to print 3 times a string stored in the variable <code>str</code>, followed by its first 9 characters.</p> <ul> <li>You can find the source code here</li> <li>The output of the program should be:<ul> <li>3 times the value of <code>str</code></li> <li>followed by a new line</li> <li>followed by the 9 first characters of <code>str</code></li> <li>followed by a new line</li> </ul> </li> <li>You are not allowed to use any loops or conditional statement</li> <li>Your program should be maximum 5 lines long</li> </ul> <pre><code>exa@ubuntu:~/py/0x00$ ./5-print_string.py\nALX ALX ALX ALX\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: PyLAMP-Program_Projects</li> <li>Directory: 0x00-python-hello_world</li> <li>File: 5-print_string.py</li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#6-play-with-strings","title":"6. Play with strings","text":"<p>Complete the source code to print <code>Welcome to ALX</code></p> <ul> <li>You can find the source code here</li> <li>You are not allowed to use any loops or conditional statements.</li> <li>You have to use the variables <code>str1</code> and <code>str2</code> in your new line of code</li> <li>Your program should be exactly 5 lines long</li> </ul> <pre><code>exa@ubuntu:~/py/0x00$ ./6-concat.py\nWelcome to ALX!\nexa@ubuntu:~/py/0x00$ wc -l 6-concat.py\n5 6-concat.py\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>6-concat.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#7-copy-cut-paste","title":"7. Copy - Cut - Paste","text":"<p>Complete the source code</p> <ul> <li>You can find the source code here</li> <li>You are not allowed to use any loops or conditional statements</li> <li>Your program should be exactly 8 lines long</li> <li><code>word_first_3</code> should contain the first 3 letters of the variable <code>word</code></li> <li><code>word_last_2</code> should contain the last 2 letters of the variable <code>word</code></li> <li><code>middle_word</code> should contain the value of the variable <code>word</code> without the first and last letters</li> </ul> <pre><code>exa@ubuntu:~/py/0x00$ ./7-edges.py\nFirst 3 letters: Hol\nLast 2 letters: on\nMiddle word: olberto\nexa@ubuntu:~/py/0x00$ wc -l 7-edges.py\n8 7-edges.py\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>7-edges.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#8-create-a-new-sentence","title":"8. Create a new sentence","text":"<p>Complete the source code to print <code>object-oriented programming with Python</code>, followed by a new line.</p> <ul> <li>You can find the source code here</li> <li>You are not allowed to use any loops or conditional statements</li> <li>Your program should be exactly 5 lines long</li> <li>You are not allowed to create new variables</li> <li>You are not allowed to use string literals</li> </ul> <pre><code>exa@ubuntu:~/py/0x00$ ./8-concat_edges.py\nobject-oriented programming with Python\nexa@ubuntu:~/py/0x00$ wc -l 8-concat_edges.py\n5 8-concat_edges.py\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>8-concat_edges.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x01-Python-if_else_loops_functions/#9-easter-egg","title":"9. Easter Egg","text":"<p>Write a Python script that prints \u201cThe Zen of Python\u201d, by TimPeters, followed by a new line.</p> <p>Your script should be maximum 98 characters long (please check with <code>wc -m 9-easter_egg.py</code>)</p> <pre><code>exa@ubuntu:~/py/0x00$ ./9-easter_egg.py\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\nexa@ubuntu:~/py/0x00$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x00-python-hello_world</code></li> <li>File: <code>9-easter_egg.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/","title":"0x02. Python - import &amp; modules","text":"<p><code>Python</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#resources","title":"Resources:","text":"<ul> <li>Modules</li> <li>Command line arguments</li> <li>Pycodestyle \u2013 Style Guide for Python Code</li> </ul> <p>man or help: <code>python3</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Why Python programming is awesome</li> <li>How to import functions from another file</li> <li>How to use imported functions</li> <li>How to create a module</li> <li>How to use the built-in function <code>dir()</code></li> <li>How to prevent code in your script from being executed when imported</li> <li>How to use command line arguments with your Python programs</li> </ul>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#requirements","title":"Requirements","text":""},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#general","title":"General","text":"<ul> <li>Your code should use the pycodestyle</li> <li>All your files must be executable</li> <li>All your files should end with a new line</li> <li>The first line of all your files should be exactly <code>#!/usr/bin/python3</code></li> <li>A <code>README.md</code> file at the root of the repo, containing a description of the repository</li> <li>A <code>README.md</code> file, at the root of the folder of this project, is mandatory</li> </ul>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#more-info","title":"More Info","text":""},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#pycodestyle","title":"Pycodestyle","text":"<p>Pycodestyle is now the new standard of Python style code</p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#tasks","title":"Tasks","text":""},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#0-import-a-simple-function-from-a-simple-file","title":"0. Import a simple function from a simple file","text":"<p>Write a program that imports the function <code>def add(a, b):</code> from the file <code>add_0.py</code> and prints the result of the addition <code>1 + 2 = 3</code></p> <ul> <li>You have to use <code>print</code> function with string format to display integers</li> <li>You have to assign:<ul> <li>the value <code>1</code> to a variable called <code>a</code></li> <li>the value <code>2</code> to a variable called <code>b</code></li> <li>and use those two variables as arguments when calling the functions <code>add</code> and <code>print</code></li> </ul> </li> <li><code>a</code> and <code>b</code> must be defined in 2 different lines: <code>a = 1</code> and another <code>b = 2</code></li> <li>Your program should print: <code>&lt;a value&gt; + &lt;b value&gt; = &lt;add(a, b) value&gt;</code> followed with a new line</li> <li>You can only use the word <code>add_0</code> once in your code</li> <li>You are not allowed to use <code>*</code> for importing or <code>__import__</code></li> <li>Your code should not be executed when imported - by using <code>__import__,</code> like the example below</li> </ul> <pre><code>exa@ubuntu:~/0x02$ cat add_0.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"My addition function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a + b\n    \"\"\"\n    return (a + b)\n\nexa@ubuntu:~/0x02$ ./0-add.py\n1 + 2 = 3\nexa@ubuntu:~/0x02$ cat 0-import_add.py\n__import__(\"0-add\")\nexa@ubuntu:~/0x02$ python3 0-import_add.py\nexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>0-add.py</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#1-my-first-toolbox","title":"1. My first toolbox!","text":"<p>Write a program that imports functions from the file <code>calculator_1.py</code>, does some Maths, and prints the result.</p> <ul> <li>Do not use the function <code>print</code> (with string format to display integers) more than 4 times</li> <li>You have to define:<ul> <li>the value <code>10</code> to a variable <code>a</code></li> <li>the value <code>5</code> to a variable <code>b</code></li> <li>and use those two variables only, as arguments when calling functions (including <code>print</code>)</li> </ul> </li> <li><code>a</code> and <code>b</code> must be defined in 2 different lines: <code>a = 10</code> and another <code>b = 5</code></li> <li>Your program should call each of the imported functions. See example below for format</li> <li>the word <code>calculator_1</code> should be used only once in your file</li> <li>You are not allowed to use <code>*</code> for importing or <code>__import__</code></li> <li>Your code should not be executed when imported</li> </ul> <pre><code>exa@ubuntu:~/0x02$ cat calculator_1.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"My addition function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a + b\n    \"\"\"\n    return (a + b)\n\n\ndef sub(a, b):\n    \"\"\"My subtraction function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a - b\n    \"\"\"\n    return (a - b)\n\n\ndef mul(a, b):\n    \"\"\"My multiplication function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a * b\n    \"\"\"\n    return (a * b)\n\n\ndef div(a, b):\n    \"\"\"My division function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a / b\n    \"\"\"\n    return int(a / b)\n\nexa@ubuntu:~/0x02$ ./1-calculation.py\n10 + 5 = 15\n10 - 5 = 5\n10 * 5 = 50\n10 / 5 = 2\nexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>1-calculation.py</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#2-how-to-make-a-script-dynamic","title":"2. How to make a script dynamic!","text":"<p>Write a program that prints the number of and the list of its arguments.</p> <ul> <li>The output should be:<ul> <li>Number of argument(s) followed by <code>argument</code> (if number is one) or <code>arguments</code> (otherwise), followed by</li> <li>: (or . if no arguments were passed) followed by</li> <li>a new line, followed by (if at least one argument),</li> <li>one line per argument:<ul> <li>the position of the argument (starting at <code>1</code>) followed by :, followed by the argument value and a new line</li> </ul> </li> </ul> </li> <li>Your code should not be executed when imported</li> <li>The number of elements of <code>argv</code> can be retrieved by using: <code>len(argv)</code></li> <li>You do not have to fully understand lists yet, but imagine that <code>argv</code> can be used just like a C array: you can use an index to walk through it. There are other ways (which will be preferred for future project tasks), if you know them you can use them.</li> </ul> <pre><code>exa@ubuntu:~/0x02$ ./2-args.py\n0 arguments.\nexa@ubuntu:~/0x02$ ./2-args.py Hello\n1 argument:\n1: Hello\nexa@ubuntu:~/0x02$ ./2-args.py Hello Welcome To The Best School\n6 arguments:\n1: Hello\n2: Welcome\n3: To\n4: The\n5: Best\n6: School\nexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>2-args.py</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#3-infinite-addition","title":"3. Infinite addition","text":"<p>Write a program that prints the result of the addition of all arguments</p> <ul> <li>The output should be the result of the addition of all arguments, followed by a new line</li> <li>You can cast arguments into integers by using <code>int()</code> (you can assume that all arguments can be casted into integers)</li> <li>Your code should not be executed when imported</li> </ul> <pre><code>exa@ubuntu:~/0x02$ ./3-infinite_add.py\n0\nexa@ubuntu:~/0x02$ ./3-infinite_add.py 79 10\n89\nexa@ubuntu:~/0x02$ ./3-infinite_add.py 79 10 -40 -300 89\n-162\nexa@ubuntu:~/0x02$\n</code></pre> <p>Last but not least, your program should also handle big numbers. And the good news is: if your program works for the above example, it will work for the following example:</p> <pre><code>exa@ubuntu:~/0x02$ ./3-infinite_add.pynnexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>3-infinite_add.py</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#4-who-are-you","title":"4. Who are you?","text":"<p>Write a program that prints all the names defined by the compiled module hidden_4.pyc (please download it locally).</p> <p>You should print one name per line, in alpha order You should print only names that do not start with <code>__</code> Your code should not be executed when imported Make sure you are running your code in Python3.8.x (<code>hidden_4.pyc</code> has been compiled with this version)</p> <pre><code>exa@ubuntu:~/0x02$ curl -Lso \"hidden_4.pyc\" \"https://github.com/alx-tools/0x02.py/raw/master/hidden_4.pyc\"\nexa@ubuntu:~/0x02$ ./4-hidden_discovery.py | sort\nmy_secret_santa\nprint_hidden\nprint_school\nexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>4-hidden_discovery.py</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#5-everything-can-be-imported","title":"5. Everything can be imported","text":"<p>Write a program that imports the variable <code>a</code> from the file <code>variable_load_5.py</code> and prints its value.</p> <ul> <li>You are not allowed to use <code>*</code> for importing or <code>__import__</code></li> <li>Your code should not be executed when imported</li> </ul> <pre><code>exa@ubuntu:~/0x02$ cat variable_load_5.py\n#!/usr/bin/python3\na = 98\n\"\"\"Simple variable\n\"\"\"\n\nexa@ubuntu:~/0x02$ ./5-variable_load.py\n98\nexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>5-variable_load.py</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#6-build-my-own-calculator","title":"6. Build my own calculator!","text":"<p>Write a program that imports all functions from the file <code>calculator_1.py</code> and handles basic operations.</p> <ul> <li>Usage: <code>./100-my_calculator.py a operator b</code><ul> <li>If the number of arguments is not 3, your program has to:<ul> <li>print <code>Usage: ./100-my_calculator.py &lt;a&gt; &lt;operator&gt; &lt;b&gt;</code> followed with a new line</li> <li>exit with the value <code>1</code></li> </ul> </li> <li><code>operator</code> can be:<ul> <li><code>+</code> for addition</li> <li><code>-</code> for subtraction</li> <li><code>*</code> for multiplication</li> <li><code>/</code> for division</li> </ul> </li> <li>If the operator is not one of the above:<ul> <li>print <code>Unknown operator. Available operators: +, -, * and /</code>followed with a new line</li> <li>exit with the value <code>1</code></li> </ul> </li> <li>You can cast <code>a</code> and <code>b</code> into integers by using <code>int()</code> (you can assume that all arguments will be castable into integers)</li> <li>The result should be printed like this: <code>&lt;a&gt; &lt;operator&gt; &lt;b&gt; = &lt;result&gt;</code>, followed by a new line</li> </ul> </li> <li>You are not allowed to use * for importing or <code>__import__</code></li> <li>Your code should not be executed when imported</li> </ul> <pre><code>exa@ubuntu:~/0x02$ cat calculator_1.py\n#!/usr/bin/python3\ndef add(a, b):\n    \"\"\"My addition function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a + b\n    \"\"\"\n    return (a + b)\n\n\ndef sub(a, b):\n    \"\"\"My subtraction function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a - b\n    \"\"\"\n    return (a - b)\n\n\ndef mul(a, b):\n    \"\"\"My multiplication function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a * b\n    \"\"\"\n    return (a * b)\n\n\ndef div(a, b):\n    \"\"\"My division function\n\n    Args:\n        a: first integer\n        b: second integer\n\n    Returns:\n        The return value. a / b\n    \"\"\"\n    return int(a / b)\n\nexa@ubuntu:~/0x02$ ./100-my_calculator.py ; echo $?\nUsage: ./100-my_calculator.py &lt;a&gt; &lt;operator&gt; &lt;b&gt;\n1\nexa@ubuntu:~/0x02$ ./100-my_calculator.py 3 + 5 ; echo $?\n3 + 5 = 8\n0\nexa@ubuntu:~/0x02$ ./100-my_calculator.py 3 H 5 ; echo $?\nUnknown operator. Available operators: +, -, * and /\n1\nexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>100-my_calculator.py</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#7-easy-print","title":"7. Easy print","text":"<p>Write a program that prints <code>#pythoniscool</code>, followed by a new line, in the standard output.</p> <p>Your program should be maximum 2 lines long You are not allowed to use <code>print</code> or <code>eval</code> or <code>open</code> or <code>import sys</code> in your file <code>101-easy_print.py</code></p> <pre><code>exa@ubuntu:~/0x02$ ./101-easy_print.py\n#pythoniscool\nexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>101-easy_print.py</code></p>"},{"location":"Higher-level_programming/Python/0x02-python-import_modules/#8-fast-alphabet","title":"8. Fast alphabet","text":"<p>Write a program that prints the alphabet in uppercase, followed by a new line.</p> <ul> <li>Your program should be maximum 3 lines long</li> <li>You are not allowed to use:<ul> <li>any loops</li> <li>any conditional statements</li> <li><code>str.join()</code></li> <li>any string literal</li> <li>any system calls</li> </ul> </li> </ul> <pre><code>exa@ubuntu:~/0x02$ ./103-fast_alphabet.py\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nexa@ubuntu:~/0x02$ wc -l 103-fast_alphabet.py\n3 103-fast_alphabet.py\nexa@ubuntu:~/0x02$\n</code></pre> <p>Repo: - GitHub repository: <code>PyLAMP-Program_Projects</code> - Directory: <code>0x02-python-import_modules</code> - File: <code>103-fast_alphabet.py</code></p>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/","title":"0x03. Python - Data Structures: Lists, Tuples","text":"<p><code>Python</code></p>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#resources","title":"Resources:","text":"<p>Read or watch:</p> <ul> <li>3.1.3. Lists</li> <li>Data structures (until <code>5.3. Tuples and Sequences</code> included)</li> <li>Learn to Program 6 : Lists</li> </ul> <p>man or help: <code>python3</code></p>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Why Python programming is awesome</li> <li>What are lists and how to use them</li> <li>What are the differences and similarities between strings and lists</li> <li>What are the most common methods of lists and how to use them</li> <li>How to use lists as stacks and queues</li> <li>What are list comprehensions and how to use them</li> <li>What are tuples and how to use them</li> <li>When to use tuples versus lists</li> <li>What is a sequence</li> <li>What is tuple packing</li> <li>What is sequence unpacking</li> <li>What is the <code>del</code> statement and how to use it</li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#requirements","title":"Requirements","text":""},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#python-scripts","title":"Python scripts","text":"<ul> <li>Your code should use the pycodestyle</li> <li>All your files must be executable</li> <li>All your files should end with a new line</li> <li>The first line of all your files should be exactly <code>#!/usr/bin/python3</code></li> <li>A <code>README.md</code> file at the root of the repo, containing a description of the repository</li> <li>A <code>README.md</code> file, at the root of the folder of this project, is mandatory</li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#more-info","title":"More Info","text":""},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#pycodestyle","title":"Pycodestyle","text":"<p>Pycodestyle is now the new standard of Python style code</p>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#tasks","title":"Tasks","text":""},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#0-print-a-list-of-integers","title":"0. Print a list of integers","text":"<p>Write a function that prints all integers of a list.</p> <ul> <li>Prototype: <code>def print_list_integer(my_list=[]):</code></li> <li>Format: one integer per line. See example</li> <li>You are not allowed to import any module</li> <li>You can assume that the list only contains integers</li> <li>You are not allowed to cast integers into strings</li> <li>You have to use <code>str.format()</code> to print integers</li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 0-main.py\n#!/usr/bin/python3\nprint_list_integer = __import__('0-print_list_integer').print_list_integer\n\nmy_list = [1, 2, 3, 4, 5]\nprint_list_integer(my_list)\n\nexa@ubuntu:~/0x03$ ./0-main.py\n1\n2\n3\n4\n5\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>0-print_list_integer.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#1-secure-access-to-an-element-in-a-list","title":"1. Secure access to an element in a list","text":"<p>Write a function that retrieves an element from a list like in C.</p> <ul> <li>Prototype: <code>def element_at(my_list, idx):</code></li> <li>If <code>idx</code> is negative, the function should return <code>None</code></li> <li>If <code>idx</code> is out of range (&gt; of number of element in <code>my_list</code>), the function should return <code>None</code></li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>try/except</code></li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 1-main.py\n#!/usr/bin/python3\nelement_at = __import__('1-element_at').element_at\n\nmy_list = [1, 2, 3, 4, 5]\nidx = 3\nprint(\"Element at index {:d} is {}\".format(idx, element_at(my_list, idx)))\n\nexa@ubuntu:~/0x03$ ./1-main.py\nElement at index 3 is 4\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>1-element_at.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#2-replace-element","title":"2. Replace element","text":"<p>Write a function that replaces an element of a list at a specific position (like in C).</p> <ul> <li>Prototype: <code>def replace_in_list(my_list, idx, element):</code></li> <li>If <code>idx</code> is negative, the function should not modify anything, and returns the original list</li> <li>If <code>idx</code> is out of range (&gt; of number of element in <code>my_list</code>), the function should not modify anything, and returns the original list</li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>try/except</code></li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 2-main.py\n#!/usr/bin/python3\nreplace_in_list = __import__('2-replace_in_list').replace_in_list\n\nmy_list = [1, 2, 3, 4, 5]\nidx = 3\nnew_element = 9\nnew_list = replace_in_list(my_list, idx, new_element)\n\nprint(new_list)\nprint(my_list)\n\nexa@ubuntu:~/0x03$ ./2-main.py\n[1, 2, 3, 9, 5]\n[1, 2, 3, 9, 5]\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>2-replace_in_list.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#3-print-a-list-of-integers-in-reverse","title":"3. Print a list of integers... in reverse!","text":"<p>Write a function that prints all integers of a list, in reverse order.</p> <ul> <li>Prototype: <code>def print_reversed_list_integer(my_list=[]):</code></li> <li>Format: one integer per line. See example</li> <li>You are not allowed to import any module</li> <li>You can assume that the list only contains integers</li> <li>You are not allowed to cast integers into strings</li> <li>You have to use <code>str.format()</code> to print integers</li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 3-main.py\n#!/usr/bin/python3\nprint_reversed_list_integer = __import__('3-print_reversed_list_integer').print_reversed_list_integer\n\nmy_list = [1, 2, 3, 4, 5]\nprint_reversed_list_integer(my_list)\n\nexa@ubuntu:~/0x03$ ./3-main.py\n5\n4\n3\n2\n1\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>3-print_reversed_list_integer.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#4-replace-in-a-copy","title":"4. Replace in a copy","text":"<p>Write a function that replaces an element in a list at a specific position without modifying the original list (like in C).</p> <ul> <li>Prototype: <code>def new_in_list(my_list, idx, element):</code></li> <li>If <code>idx</code> is negative, the function should return a copy of the original <code>list</code></li> <li>If <code>idx</code> is out of range (&gt; of number of element in <code>my_list</code>), the function should return a copy of the original <code>list</code></li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>try/except</code></li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 4-main.py\n#!/usr/bin/python3\nnew_in_list = __import__('4-new_in_list').new_in_list\n\nmy_list = [1, 2, 3, 4, 5]\nidx = 3\nnew_element = 9\nnew_list = new_in_list(my_list, idx, new_element)\n\nprint(new_list)\nprint(my_list)\n\nexa@ubuntu:~/0x03$ ./4-main.py\n[1, 2, 3, 9, 5]\n[1, 2, 3, 4, 5]\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>4-new_in_list.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#5-can-you-c-me-now","title":"5. Can you C me now?","text":"<p>Write a function that removes all characters <code>c</code> and <code>C</code> from a string.</p> <ul> <li>Prototype: <code>def no_c(my_string):</code></li> <li>The function should return the new string</li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>str.replace()</code></li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 5-main.py\n#!/usr/bin/env python3\nno_c = __import__('5-no_c').no_c\n\nprint(no_c(\"Best School\"))\nprint(no_c(\"Chicago\"))\nprint(no_c(\"C is fun!\"))\n\nexa@ubuntu:~/0x03$ ./5-main.py\nBest Shool\nhiago\n is fun!\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>5-no_c.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#6-lists-of-lists-matrix","title":"6. Lists of lists = Matrix","text":"<p>Write a function that prints a matrix of integers.</p> <ul> <li>Prototype: <code>def print_matrix_integer(matrix=[[]]):</code></li> <li>Format: see example</li> <li>You are not allowed to import any module</li> <li>You can assume that the list only contains integers</li> <li>You are not allowed to cast integers into strings</li> <li>You have to use <code>str.format()</code> to print integers</li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 6-main.py\n#!/usr/bin/python3\nprint_matrix_integer = __import__('6-print_matrix_integer').print_matrix_integer\n\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nprint_matrix_integer(matrix)\nprint(\"--\")\nprint_matrix_integer()\n\nexa@ubuntu:~/0x03$ ./6-main.py | cat -e\n1 2 3$\n4 5 6$\n7 8 9$\n--$\n$\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>6-print_matrix_integer.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#7-tuples-addition","title":"7. Tuples addition","text":"<p>Write a function that adds 2 tuples.</p> <ul> <li>Prototype: <code>def add_tuple(tuple_a=(), tuple_b=()):</code><ul> <li>Returns a tuple with 2 integers:</li> <li>The first element should be the addition of the first element of each argument</li> </ul> </li> <li>The second element should be the addition of the second element of each argument</li> <li>You are not allowed to import any module</li> <li>You can assume that the two tuples will only contain integers</li> <li>If a tuple is smaller than 2, use the value <code>0</code> for each missing integer</li> <li>If a tuple is bigger than 2, use only the first 2 integers</li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 7-main.py\n#!/usr/bin/python3\nadd_tuple = __import__('7-add_tuple').add_tuple\n\ntuple_a = (1, 89)\ntuple_b = (88, 11)\nnew_tuple = add_tuple(tuple_a, tuple_b)\nprint(new_tuple)\n\nprint(add_tuple(tuple_a, (1, )))\nprint(add_tuple(tuple_a, ()))\n\nexa@ubuntu:~/0x03$ ./7-main.py\n(89, 100)\n(2, 89)\n(1, 89)\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>7-add_tuple.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#8-more-returns","title":"8. More returns!","text":"<p>Write a function that returns a tuple with the length of a string and its first character.</p> <ul> <li>Prototype: <code>def multiple_returns(sentence):</code></li> <li>If the sentence is empty, the first character should be equal to <code>None</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>  exa@ubuntu:~/0x03$ cat 8-main.py\n#!/usr/bin/python3\nmultiple_returns = __import__('8-multiple_returns').multiple_returns\n\nsentence = \"At school, I learnt C!\"\nlength, first = multiple_returns(sentence)\nprint(\"Length: {:d} - First character: {}\".format(length, first))\n\nexa@ubuntu:~/0x03$ ./8-main.py\nLength: 22 - First character: A\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>8-multiple_returns.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#9-find-the-max","title":"9. Find the max","text":"<p>Write a function that finds the biggest integer of a list.</p> <ul> <li>Prototype: <code>def max_integer(my_list=[]):</code></li> <li>If the list is empty, return <code>None</code></li> <li>You can assume that the list only contains integers</li> <li>You are not allowed to import any module</li> <li>You are not allowed to use the builtin <code>max()</code></li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 9-main.py\n#!/usr/bin/python3\nmax_integer = __import__('9-max_integer').max_integer\n\nmy_list = [1, 90, 2, 13, 34, 5, -13, 3]\nmax_value = max_integer(my_list)\nprint(\"Max: {}\".format(max_value))\n\nexa@ubuntu:~/0x03$ ./9-main.py\nMax: 90\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>9-max_integer.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#10-only-by-2","title":"10. Only by 2","text":"<p>Write a function that finds all multiples of 2 in a list.</p> <ul> <li>Prototype: <code>def divisible_by_2(my_list=[]):</code></li> <li>Return a new list with <code>True</code> or <code>False</code>, depending on whether the integer at the same position in the original list is a multiple of 2</li> <li>The new list should have the same size as the original list</li> <li>You are not allowed to import any module</li> </ul> <pre><code>gexa@ubuntu:~/0x03$ cat 10-main.py\n#!/usr/bin/python3\ndivisible_by_2 = __import__('10-divisible_by_2').divisible_by_2\n\nmy_list = [0, 1, 2, 3, 4, 5, 6]\nlist_result = divisible_by_2(my_list)\n\ni = 0\nwhile i &lt; len(list_result):\n    print(\"{:d} {:s} divisible by 2\".format(my_list[i], \"is\" if list_result[i] else \"is not\"))\n    i += 1\n\nexa@ubuntu:~/0x03$ ./10-main.py\n0 is divisible by 2\n1 is not divisible by 2\n2 is divisible by 2\n3 is not divisible by 2\n4 is divisible by 2\n5 is not divisible by 2\n6 is divisible by 2\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>10-divisible_by_2.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#11-delete-at","title":"11. Delete at","text":"<p>Write a function that deletes the item at a specific position in a list.</p> <ul> <li>Prototype: <code>def delete_at(my_list=[], idx=0):</code></li> <li>If <code>idx</code> is negative or out of range, nothing change (returns the same list)</li> <li>You are not allowed to use <code>pop()</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x03$ cat 11-main.py\n#!/usr/bin/python3\ndelete_at = __import__('11-delete_at').delete_at\n\nmy_list = [1, 2, 3, 4, 5]\nidx = 3\nnew_list = delete_at(my_list, idx)\nprint(new_list)\nprint(my_list)\n\nexa@ubuntu:~/0x03$ ./11-main.py\n[1, 2, 3, 5]\n[1, 2, 3, 5]\nexa@ubuntu:~/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>11-delete_at.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x03-python-data_structures/#12-switch","title":"12. Switch","text":"<p>Complete the source code in order to switch value of <code>a</code> and <code>b</code></p> <ul> <li>You can find the source code here</li> <li>Your code should be inserted where the comment is (line 4)</li> <li>Your program should be exactly 5 lines long</li> </ul> <pre><code>exa@ubuntu:~/py/0x03$ ./12-switch.py\na=10 - b=89\nexa@ubuntu:~/py/0x03$ wc -l 12-switch.py\n5 12-switch.py\nexa@ubuntu:~/py/0x03$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x03-python-data_structures</code></li> <li>File: <code>12-switch.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/","title":"0x04. Python - More Data Structures: Set, Dictionary","text":"<p><code>Python</code></p>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#resources","title":"Resources:","text":"<p>Read or watch:</p> <ul> <li>Data structures</li> <li>Lambda, filter, reduce and map</li> <li>Learn to Program 12 Lambda Map Filter Reduce</li> </ul> <p>man or help:</p> <ul> <li><code>python3</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Why Python programming is awesome</li> <li>What are sets and how to use them</li> <li>What are the most common methods of set and how to use them</li> <li>When to use sets versus lists</li> <li>How to iterate into a set</li> <li>What are dictionaries and how to use them</li> <li>When to use dictionaries versus lists or sets</li> <li>What is a key in a dictionary</li> <li>How to iterate over a dictionary</li> <li>What is a lambda function</li> <li>What are the map, reduce and filter functions</li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#requirements","title":"Requirements","text":"<ul> <li>All your files should end with a new line</li> <li>The first line of all your files should be exactly #!/usr/bin/python3</li> <li>A README.md file, at the root of the folder of the project, is mandatory</li> <li>Your code should use the pycodestyle (version 2.8.*)</li> <li>All your files must be executable</li> <li>The length of your files will be tested using wc</li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#more-info","title":"More Info","text":""},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#pycodestyle","title":"Pycodestyle","text":"<p>Pycodestyle is now the new standard of Python style code</p>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#tasks","title":"Tasks","text":""},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#0-squared-simple","title":"0. Squared simple","text":"<p>Write a function that computes the square value of all integers of a matrix.</p> <ul> <li>Prototype: <code>def square_matrix_simple(matrix=[]):</code></li> <li><code>matrix</code> is a 2 dimensional array</li> <li>Returns a new matrix:<ul> <li>Same size as <code>matrix</code></li> <li>Each value should be the square of the value of the input</li> </ul> </li> <li>Initial matrix should not be modified</li> <li>You are not allowed to import any module</li> <li>You are allowed to use regular loops, <code>map</code>, etc.</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 0-main.py\n#!/usr/bin/python3\nsquare_matrix_simple = __import__('0-square_matrix_simple').square_matrix_simple\n\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nnew_matrix = square_matrix_simple(matrix)\nprint(new_matrix)\nprint(matrix)\n\nexa@ubuntu:~/0x04$ ./0-main.py\n[[1, 4, 9], [16, 25, 36], [49, 64, 81]]\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>0-square_matrix_simple.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#1-search-and-replace","title":"1. Search and replace","text":"<p>Write a function that replaces all occurrences of an element by another in a new list.</p> <ul> <li>Prototype: <code>def search_replace(my_list, search, replace):</code></li> <li><code>my_list</code> is the initial list</li> <li><code>search</code> is the element to replace in the list</li> <li><code>replace</code> is the new element</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 1-main.py\n#!/usr/bin/python3\nsearch_replace = __import__('1-search_replace').search_replace\n\nmy_list = [1, 2, 3, 4, 5, 4, 2, 1, 1, 4, 89]\nnew_list = search_replace(my_list, 2, 89)\n\nprint(new_list)\nprint(my_list)\n\nexa@ubuntu:~/0x04$ ./1-main.py\n[1, 89, 3, 4, 5, 4, 89, 1, 1, 4, 89]\n[1, 2, 3, 4, 5, 4, 2, 1, 1, 4, 89]\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>1-search_replace.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#2-unique-addition","title":"2. Unique addition","text":"<p>Write a function that adds all unique integers in a list (only once for each integer).</p> <ul> <li>Prototype: def <code>uniq_add(my_list=[]):</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 2-main.py\n#!/usr/bin/python3\nuniq_add = __import__('2-uniq_add').uniq_add\n\nmy_list = [1, 2, 3, 1, 4, 2, 5]\nresult = uniq_add(my_list)\nprint(\"Result: {:d}\".format(result))\n\nexa@ubuntu:~/0x04$ ./2-main.py\nResult: 15\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>2-uniq_add.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#3-present-in-both","title":"3. Present in both","text":"<p>Write a function that returns a set of common elements in two sets.</p> <ul> <li>Prototype: <code>def common_elements(set_1, set_2):</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 3-main.py\n#!/usr/bin/python3\ncommon_elements = __import__('3-common_elements').common_elements\n\nset_1 = { \"Python\", \"C\", \"Javascript\" }\nset_2 = { \"Bash\", \"C\", \"Ruby\", \"Perl\" }\nc_set = common_elements(set_1, set_2)\nprint(sorted(list(c_set)))\n\nexa@ubuntu:~/0x04$ ./3-main.py\n['C']\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>3-common_elements.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#4-only-differents","title":"4. Only differents","text":"<p>Write a function that returns a set of all elements present in only one set.</p> <ul> <li>Prototype: <code>def only_diff_elements(set_1, set_2):</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 4-main.py\n#!/usr/bin/python3\nonly_diff_elements = __import__('4-only_diff_elements').only_diff_elements\n\nset_1 = { \"Python\", \"C\", \"Javascript\" }\nset_2 = { \"Bash\", \"C\", \"Ruby\", \"Perl\" }\nod_set = only_diff_elements(set_1, set_2)\nprint(sorted(list(od_set)))\n\nexa@ubuntu:~/0x04$ ./4-main.py\n['Bash', 'Javascript', 'Perl', 'Python', 'Ruby']\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>4-only_diff_elements.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#5-number-of-keys","title":"5. Number of keys","text":"<p>Write a function that returns the number of keys in a dictionary.</p> <ul> <li>Prototype: <code>def number_keys(a_dictionary):</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 5-main.py\n#!/usr/bin/python3\nnumber_keys = __import__('5-number_keys').number_keys\n\na_dictionary = { 'language': \"C\", 'number': 13, 'track': \"Low level\" }\nnb_keys = number_keys(a_dictionary)\nprint(\"Number of keys: {:d}\".format(nb_keys))\n\nexa@ubuntu:~/0x04$ ./5-main.py\nNumber of keys: 3\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>5-number_keys.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#6-print-sorted-dictionary","title":"6. Print sorted dictionary","text":"<p>Write a function that prints a dictionary by ordered keys.</p> <ul> <li>Prototype: <code>def print_sorted_dictionary(a_dictionary):</code></li> <li>You can assume that all keys are strings</li> <li>Keys should be sorted by alphabetic order</li> <li>Only sort keys of the first level (don\u2019t sort keys of a dictionary inside the main dictionary)</li> <li>Dictionary values can have any type</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 6-main.py\n#!/usr/bin/python3\nprint_sorted_dictionary = __import__('6-print_sorted_dictionary').print_sorted_dictionary\n\na_dictionary = { 'language': \"C\", 'Number': 89, 'track': \"Low level\", 'ids': [1, 2, 3] }\nprint_sorted_dictionary(a_dictionary)\n\nexa@ubuntu:~/0x04$ ./6-main.py\nNumber: 89\nids: [1, 2, 3]\nlanguage: C\ntrack: Low level\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>6-print_sorted_dictionary.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#7-update-dictionary","title":"7. Update dictionary","text":"<p>Write a function that replaces or adds key/value in a dictionary.</p> <ul> <li>Prototype: <code>def update_dictionary(a_dictionary, key, value):</code></li> <li><code>key</code> argument will be always a string</li> <li><code>value</code> argument will be any type</li> <li>If a key exists in the dictionary, the value will be replaced</li> <li>If a key doesn\u2019t exist in the dictionary, it will be created</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 7-main.py\n#!/usr/bin/python3\nupdate_dictionary = __import__('7-update_dictionary').update_dictionary\nprint_sorted_dictionary = __import__('6-print_sorted_dictionary').print_sorted_dictionary\n\na_dictionary = { 'language': \"C\", 'number': 89, 'track': \"Low level\" }\nnew_dict = update_dictionary(a_dictionary, 'language', \"Python\")\nprint_sorted_dictionary(new_dict)\nprint(\"--\")\nprint_sorted_dictionary(a_dictionary)\n\nprint(\"--\")\nprint(\"--\")\n\nnew_dict = update_dictionary(a_dictionary, 'city', \"San Francisco\")\nprint_sorted_dictionary(new_dict)\nprint(\"--\")\nprint_sorted_dictionary(a_dictionary)\n\nexa@ubuntu:~/0x04$ ./7-main.py\nlanguage: Python\nnumber: 89\ntrack: Low level\n--\nlanguage: Python\nnumber: 89\ntrack: Low level\n--\n--\ncity: San Francisco\nlanguage: Python\nnumber: 89\ntrack: Low level\n--\ncity: San Francisco\nlanguage: Python\nnumber: 89\ntrack: Low level\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>7-update_dictionary.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#8-simple-delete-by-key","title":"8. Simple delete by key","text":"<p>Write a function that deletes a key in a dictionary.</p> <ul> <li>Prototype: <code>def simple_delete(a_dictionary, key=\"\"):</code></li> <li><code>key</code> argument will be always a string</li> <li>If a key doesn\u2019t exist, the dictionary won\u2019t change</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 8-main.py\n#!/usr/bin/python3\nsimple_delete = __import__('8-simple_delete').simple_delete\nprint_sorted_dictionary = \\\n    __import__('6-print_sorted_dictionary').print_sorted_dictionary\n\na_dictionary = { 'language': \"C\", 'Number': 89, 'track': \"Low\", 'ids': [1, 2, 3] }\nnew_dict = simple_delete(a_dictionary, 'track')\nprint_sorted_dictionary(a_dictionary)\nprint(\"--\")\nprint_sorted_dictionary(new_dict)\n\nprint(\"--\")\nprint(\"--\")\nnew_dict = simple_delete(a_dictionary, 'c_is_fun')\nprint_sorted_dictionary(a_dictionary)\nprint(\"--\")\nprint_sorted_dictionary(new_dict)\n\nexa@ubuntu:~/0x04$ ./8-main.py\nNumber: 89\nids: [1, 2, 3]\nlanguage: C\n--\nNumber: 89\nids: [1, 2, 3]\nlanguage: C\n--\n--\nNumber: 89\nids: [1, 2, 3]\nlanguage: C\n--\nNumber: 89\nids: [1, 2, 3]\nlanguage: C\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>8-simple_delete.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#9-multiply-by-2","title":"9. Multiply by 2","text":"<p>Write a function that returns a new dictionary with all values multiplied by 2</p> <ul> <li>Prototype: <code>def multiply_by_2(a_dictionary):</code></li> <li>You can assume that all values are only integers</li> <li>Returns a new dictionary</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 9-main.py\n#!/usr/bin/python3\nmultiply_by_2 = __import__('9-multiply_by_2').multiply_by_2\nprint_sorted_dictionary = \\\n    __import__('6-print_sorted_dictionary').print_sorted_dictionary\n\na_dictionary = {'John': 12, 'Alex': 8, 'Bob': 14, 'Mike': 14, 'Molly': 16}\nnew_dict = multiply_by_2(a_dictionary)\nprint_sorted_dictionary(a_dictionary)\nprint(\"--\")\nprint_sorted_dictionary(new_dict)\n\nexa@ubuntu:~/0x04$ ./9-main.py\nAlex: 8\nBob: 14\nJohn: 12\nMike: 14\nMolly: 16\n--\nAlex: 16\nBob: 28\nJohn: 24\nMike: 28\nMolly: 32\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>9-multiply_by_2.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#10-best-score","title":"10. Best score","text":"<p>Write a function that returns a key with the biggest integer value.</p> <ul> <li>Prototype: <code>def best_score(a_dictionary):</code></li> <li>You can assume that all values are only integers</li> <li>If no score found, return <code>None</code></li> <li>You can assume all students have a different score</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 10-main.py\n#!/usr/bin/python3\nbest_score = __import__('10-best_score').best_score\n\na_dictionary = {'John': 12, 'Bob': 14, 'Mike': 14, 'Molly': 16, 'Adam': 10}\nbest_key = best_score(a_dictionary)\nprint(\"Best score: {}\".format(best_key))\n\nbest_key = best_score(None)\nprint(\"Best score: {}\".format(best_key))\n\nexa@ubuntu:~/0x04$ ./10-main.py\nBest score: Molly\nBest score: None\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>10-best_score.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#11-multiply-by-using-map","title":"11. Multiply by using map","text":"<p>Write a function that returns a list with all values multiplied by a number without using any loops.</p> <ul> <li>Prototype: <code>def multiply_list_map(my_list=[], number=0):</code></li> <li>Returns a new list:<ul> <li>Same length as <code>my_list</code></li> <li>Each value should be multiplied by <code>number</code></li> </ul> </li> <li>Initial list should not be modified</li> <li>You are not allowed to import any module</li> <li>You have to use <code>map</code></li> <li>Your file should be max 3 lines</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 11-main.py\n#!/usr/bin/python3\nmultiply_list_map = __import__('11-multiply_list_map').multiply_list_map\n\nmy_list = [1, 2, 3, 4, 6]\nnew_list = multiply_list_map(my_list, 4)\nprint(new_list)\nprint(my_list)\n\nexa@ubuntu:~/0x04$ ./11-main.py\n[4, 8, 12, 16, 24]\n[1, 2, 3, 4, 6]\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>11-multiply_list_map.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#12-roman-to-integer","title":"12. Roman to Integer","text":"<p>Technical interview preparation:</p> <ul> <li>You are not allowed to google anything</li> <li>Whiteboard first</li> </ul> <p>Create a function <code>def roman_to_int(roman_string):</code> that converts a [Roman numeral][https://en.wikipedia.org/wiki/Roman_numerals] to an integer.</p> <ul> <li>You can assume the number will be between 1 to 3999.</li> <li><code>def roman_to_int(roman_string)</code> must return an integer</li> <li>If the <code>roman_string</code> is not a string or <code>None</code>, return 0</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 12-main.py\n#!/usr/bin/python3\n\"\"\" Roman to Integer test file\n\"\"\"\nroman_to_int = __import__('12-roman_to_int').roman_to_int\n\nroman_number = \"X\"\nprint(\"{} = {}\".format(roman_number, roman_to_int(roman_number)))\n\nroman_number = \"VII\"\nprint(\"{} = {}\".format(roman_number, roman_to_int(roman_number)))\n\nroman_number = \"IX\"\nprint(\"{} = {}\".format(roman_number, roman_to_int(roman_number)))\n\nroman_number = \"LXXXVII\"\nprint(\"{} = {}\".format(roman_number, roman_to_int(roman_number)))\n\nroman_number = \"DCCVII\"\nprint(\"{} = {}\".format(roman_number, roman_to_int(roman_number)))\n\nexa@ubuntu:~/0x04$ ./12-main.py\nX = 10\nVII = 7\nIX = 9\nLXXXVII = 87\nDCCVII = 707\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>12-roman_to_int.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#13-weighted-average","title":"13. Weighted average!","text":"<p>Write a function that returns the weighted average of all integers tuple <code>(&lt;score&gt;, &lt;weight&gt;)</code></p> <ul> <li>Prototype: <code>def weight_average(my_list=[]):</code></li> <li>Returns <code>0</code> if the list is empty</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 100-main.py\n#!/usr/bin/python3\nweight_average = __import__('100-weight_average').weight_average\n\nmy_list = [(1, 2), (2, 1), (3, 10), (4, 2)]\n# = ((1 * 2) + (2 * 1) + (3 * 10) + (4 * 2)) / (2 + 1 + 10 + 2)\nresult = weight_average(my_list)\nprint(\"Average: {:0.2f}\".format(result))\n\nexa@ubuntu:~/0x04$ ./100-main.py\nAverage: 2.80\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>100-weight_average.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#14-squared-by-using-map","title":"14. Squared by using map","text":"<p>Write a function that computes the square value of all integers of a matrix using map</p> <ul> <li>Prototype: <code>def square_matrix_map(matrix=[]):</code></li> <li><code>matrix</code> is a 2 dimensional array</li> <li>Returns a new matrix:<ul> <li>Same size as <code>matrix</code></li> <li>Each value should be the square of the value of the input</li> </ul> </li> <li>Initial matrix should not be modified</li> <li>You are not allowed to import any module</li> <li>You have to use <code>map</code></li> <li>You are not allowed to use <code>for</code> or <code>while</code></li> <li>Your file should be max 3 lines</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 101-main.py\n#!/usr/bin/python3\nsquare_matrix_map = \\\n    __import__('101-square_matrix_map').square_matrix_map\n\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nnew_matrix = square_matrix_map(matrix)\nprint(new_matrix)\nprint(matrix)\n\nexa@ubuntu:~/0x04$ ./101-main.py\n[[1, 4, 9], [16, 25, 36], [49, 64, 81]]\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>101-square_matrix_map.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x04-python-more_data_structures/#15-delete-by-value","title":"15.  Delete by value","text":"<p>Write a function that deletes keys with a specific value in a dictionary.</p> <ul> <li>Prototype: <code>def complex_delete(a_dictionary, value):</code></li> <li>If the value doesn\u2019t exist, the dictionary won\u2019t change</li> <li>All keys having the searched value have to be deleted</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x04$ cat 102-main.py\n#!/usr/bin/python3\ncomplex_delete = __import__('102-complex_delete').complex_delete\nprint_sorted_dictionary = \\\n    __import__('6-print_sorted_dictionary').print_sorted_dictionary\n\na_dictionary = {'lang': \"C\", 'track': \"Low\", 'pref': \"C\", 'ids': [1, 2, 3]}\nnew_dict = complex_delete(a_dictionary, 'C')\nprint_sorted_dictionary(a_dictionary)\nprint(\"--\")\nprint_sorted_dictionary(new_dict)\n\nprint(\"--\")\nprint(\"--\")\nnew_dict = complex_delete(a_dictionary, 'c_is_fun')\nprint_sorted_dictionary(a_dictionary)\nprint(\"--\")\nprint_sorted_dictionary(new_dict)\n\nexa@ubuntu:~/0x04$ ./102-main.py\nids: [1, 2, 3]\ntrack: Low\n--\nids: [1, 2, 3]\ntrack: Low\n--\n--\nids: [1, 2, 3]\ntrack: Low\n--\nids: [1, 2, 3]\ntrack: Low\nexa@ubuntu:~/0x04$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x04-python-more_data_structures</code></li> <li>File: <code>102-complex_delete.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/","title":"0x05. Python - Exceptions","text":"<p><code>Python</code></p>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#resources","title":"Resources:","text":"<p>Read or watch:</p> <ul> <li>Errors and Exceptions</li> <li>Learn to Program 11 Static &amp; Exception Handling (starting at minute 7)</li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Why Python programming is awesome</li> <li>What\u2019s the difference between errors and exceptions</li> <li>What are exceptions and how to use them</li> <li>When do we need to use exceptions</li> <li>How to correctly handle an exception</li> <li>What\u2019s the purpose of catching exceptions</li> <li>How to raise a builtin exception</li> <li>When do we need to implement a clean-up action after an exception</li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#requirements","title":"Requirements","text":""},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#general","title":"General","text":"<ul> <li>All your files should end with a new line</li> <li>The first line of all your files should be exactly <code>#!/usr/bin/python3</code></li> <li>A <code>README.md</code> file, at the root of the folder of the project, is mandatory</li> <li>Your code should use the pycodestyle (version <code>2.8.*</code>)</li> <li>All your files must be executable</li> <li>The length of your files will be tested using <code>wc</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#more-info","title":"More Info","text":""},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#pycodestyle","title":"Pycodestyle","text":"<p>Pycodestyle is now the new standard of Python style code</p>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#tasks","title":"Tasks","text":""},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#0-safe-list-printing","title":"0. Safe list printing","text":"<p>Write a function that prints x elements of a list.</p> <ul> <li>Prototype: <code>def safe_print_list(my_list=[], x=0):</code></li> <li><code>my_list</code> can contain any type (integer, string, etc.)</li> <li>All elements must be printed on the same line followed by a new line.</li> <li><code>x</code> represents the number of elements to print</li> <li><code>x</code> can be bigger than the length of <code>my_list</code></li> <li>Returns the real number of elements printed</li> <li>You have to use <code>try: / except</code>:</li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>len()</code></li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 0-main.py\n#!/usr/bin/python3\nsafe_print_list = __import__('0-safe_print_list').safe_print_list\n\nmy_list = [1, 2, 3, 4, 5]\n\nnb_print = safe_print_list(my_list, 2)\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list))\nprint(\"nb_print: {:d}\".format(nb_print))\nnb_print = safe_print_list(my_list, len(my_list) + 2)\nprint(\"nb_print: {:d}\".format(nb_print))\n\nexa@ubuntu:~/0x05$ ./0-main.py\n12\nnb_print: 2\n12345\nnb_print: 5\n12345\nnb_print: 5\nexa@ubuntu:~/0x05$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>0-safe_print_list.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#1-safe-printing-of-an-integers-list","title":"1. Safe printing of an integers list","text":"<p>Write a function that prints an integer with <code>\"{:d}\".format()</code>.</p> <ul> <li>Prototype: <code>def safe_print_integer(value):</code></li> <li><code>value</code> can be any type (integer, string, etc.)</li> <li>The integer should be printed followed by a new line</li> <li>Returns <code>True</code> if <code>value</code> has been correctly printed (it means the <code>value</code> is an integer)</li> <li>Otherwise, returns <code>False</code></li> <li>You have to use <code>try: / except:</code></li> <li>You have to use <code>\"{:d}\".format()</code> to print as integer</li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>type()</code></li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 1-main.py\n#!/usr/bin/python3\nsafe_print_integer = __import__('1-safe_print_integer').safe_print_integer\n\nvalue = 89\nhas_been_print = safe_print_integer(value)\nif not has_been_print:\n    print(\"{} is not an integer\".format(value))\n\nvalue = -89\nhas_been_print = safe_print_integer(value)\nif not has_been_print:\n    print(\"{} is not an integer\".format(value))\n\nvalue = \"School\"\nhas_been_print = safe_print_integer(value)\nif not has_been_print:\n    print(\"{} is not an integer\".format(value))\n\nexa@ubuntu:~/0x05$ ./1-main.py\n89\n-89\nSchool is not an integer\nexa@ubuntu:~/0x05$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>1-safe_print_integer.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#2-print-and-count-integers","title":"2. Print and count integers","text":"<p>Write a function that prints the first x elements of a list and only integers.</p> <ul> <li>Prototype: <code>def safe_print_list_integers(my_list=[], x=0):</code></li> <li><code>my_list</code> can contain any type (integer, string, etc.)</li> <li>All integers have to be printed on the same line followed by a new line - other type of value in the list must be skipped (in silence).</li> <li><code>x</code> represents the number of elements to access in <code>my_list</code></li> <li><code>x</code> can be bigger than the length of <code>my_list</code> - if it\u2019s the case, an exception is expected to occur</li> <li>Returns the real number of integers printed</li> <li>You have to use <code>try: / except:</code></li> <li>You have to use <code>\"{:d}\".format()</code> to print an integer</li> <li>You are not allowed to import any module</li> <li>You are not allowed to use <code>len()</code></li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 2-main.py\n#!/usr/bin/python3\nsafe_print_list_integers = \\\n    __import__('2-safe_print_list_integers').safe_print_list_integers\n\nmy_list = [1, 2, 3, 4, 5]\n\nnb_print = safe_print_list_integers(my_list, 2)\nprint(\"nb_print: {:d}\".format(nb_print))\n\nmy_list = [1, 2, 3, \"School\", 4, 5, [1, 2, 3]]\nnb_print = safe_print_list_integers(my_list, len(my_list))\nprint(\"nb_print: {:d}\".format(nb_print))\n\nnb_print = safe_print_list_integers(my_list, len(my_list) + 2)\nprint(\"nb_print: {:d}\".format(nb_print))\n\nexa@ubuntu:~/0x05$ ./2-main.py\n12\nnb_print: 2\n12345\nnb_print: 5\n12345Traceback (most recent call last):\n  File \"./2-main.py\", line 14, in &lt;module&gt;\n    nb_print = safe_print_list_integers(my_list, len(my_list) + 2)\n  File \"/0x05/2-safe_print_list_integers.py\", line 7, in safe_print_list_integers\n    print(\"{:d}\".format(my_list[i]), end=\"\")\nIndexError: list index out of range\nexa@ubuntu:~/0x05$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>2-safe_print_list_integers.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#3-integers-division-with-debug","title":"3. Integers division with debug","text":"<p>Write a function that divides 2 integers and prints the result.</p> <ul> <li>Prototype: <code>def safe_print_division(a, b):</code></li> <li>You can assume that <code>a</code> and <code>b</code> are integers</li> <li>The result of the division should print on the <code>finally</code>: section preceded by <code>Inside result</code>:</li> <li>Returns the value of the division, otherwise: <code>None</code></li> <li>You have to use <code>try: / except: / finally:</code></li> <li>You have to use <code>\"{}\".format()</code> to print the result</li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 3-main.py\n#!/usr/bin/python3\nsafe_print_division = __import__('3-safe_print_division').safe_print_division\n\na = 12\nb = 2\nresult = safe_print_division(a, b)\nprint(\"{:d} / {:d} = {}\".format(a, b, result))\n\na = 12\nb = 0\nresult = safe_print_division(a, b)\nprint(\"{:d} / {:d} = {}\".format(a, b, result))\n\nexa@ubuntu:~/0x05$ ./3-main.py\nInside result: 6.0\n12 / 2 = 6.0\nInside result: None\n12 / 0 = None\nexa@ubuntu:~/0x05$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>3-safe_print_division.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#4-divide-a-list","title":"4. Divide a list","text":"<p>Write a function that divides element by element 2 lists.</p> <ul> <li>Prototype: <code>def list_division(my_list_1, my_list_2, list_length):</code></li> <li><code>my_list_1</code> and <code>my_list_2</code> can contain any type (integer, string, etc.)</li> <li><code>list_length</code> can be bigger than the length of both lists</li> <li>Returns a new list (length = <code>list_length</code>) with all divisions</li> <li>If 2 elements can\u2019t be divided, the division result should be equal to <code>0</code></li> <li>If an element is not an integer or float:</li> <li>print: <code>wrong type</code></li> <li>If the division can\u2019t be done (<code>/0</code>):</li> <li>print: <code>division by 0</code></li> <li>If <code>my_list_1</code> or <code>my_list_2</code> is too short</li> <li>print: <code>out of range</code></li> <li>You have to use <code>try: / except: / finally:</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 4-main.py\n#!/usr/bin/python3\nlist_division = __import__('4-list_division').list_division\n\nmy_l_1 = [10, 8, 4]\nmy_l_2 = [2, 4, 4]\nresult = list_division(my_l_1, my_l_2, max(len(my_l_1), len(my_l_2)))\nprint(result)\n\nprint(\"--\")\n\nmy_l_1 = [10, 8, 4, 4]\nmy_l_2 = [2, 0, \"H\", 2, 7]\nresult = list_division(my_l_1, my_l_2, max(len(my_l_1), len(my_l_2)))\nprint(result)\n\nexa@ubuntu:~/0x05$ ./4-main.py\n[5.0, 2.0, 1.0]\n--\ndivision by 0\nwrong type\nout of range\n[5.0, 0, 0, 2.0, 0]\nexa@ubuntu:~/0x05$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>4-list_division.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#5-raise-exception","title":"5. Raise exception","text":"<p>Write a function that raises a type exception.</p> <ul> <li>Prototype: <code>def raise_exception():</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 5-main.py\n#!/usr/bin/python3\nraise_exception = __import__('5-raise_exception').raise_exception\n\ntry:\n    raise_exception()\nexcept TypeError as te:\n    print(\"Exception raised\")\n\nexa@ubuntu:~/0x05$ ./5-main.py\nException raised\nexa@ubuntu:~/0x05$\n\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>5-raise_exception.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#6-raise-a-message","title":"6. Raise a message","text":"<p>Write a function that raises a name exception with a message.</p> <ul> <li>Prototype: <code>def raise_exception_msg(message=\"\"):</code></li> <li>You are not allowed to import any module</li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 6-main.py\n#!/usr/bin/python3\nraise_exception_msg = __import__('6-raise_exception_msg').raise_exception_msg\n\ntry:\n    raise_exception_msg(\"C is fun\")\nexcept NameError as ne:\n    print(ne)\n\nexa@ubuntu:~/0x05$ ./6-main.py\nC is fun\nexa@ubuntu:~/0x05$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>6-raise_exception_msg.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#7-safe-integer-print-with-error-message","title":"7. Safe integer print with error message","text":"<p>Write a function that prints an integer.</p> <ul> <li>Prototype: <code>def safe_print_integer_err(value):</code></li> <li><code>value</code> can be any type (integer, string, etc.)</li> <li>The integer should be printed followed by a new line</li> <li>Returns <code>True</code> if <code>value</code> has been correctly printed (it means the <code>value</code> is an integer)</li> <li>Otherwise, returns <code>False</code> and prints in <code>stderr</code> the error precede by <code>Exception</code>:</li> <li>You have to use <code>try: / except:</code></li> <li>You have to use <code>\"{:d}\".format()</code> to print as integer</li> <li>You are not allowed to use <code>type()</code></li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 100-main.py\n#!/usr/bin/python3\nsafe_print_integer_err = \\\n    __import__('100-safe_print_integer_err').safe_print_integer_err\n\nvalue = 89\nhas_been_print = safe_print_integer_err(value)\nif not has_been_print:\n    print(\"{} is not an integer\".format(value))\n\nvalue = -89\nhas_been_print = safe_print_integer_err(value)\nif not has_been_print:\n    print(\"{} is not an integer\".format(value))\n\nvalue = \"School\"\nhas_been_print = safe_print_integer_err(value)\nif not has_been_print:\n    print(\"{} is not an integer\".format(value))\n\nexa@ubuntu:~/0x05$ ./100-main.py\n89\n-89\nException: Unknown format code 'd' for object of type 'str'\nSchool is not an integer\nexa@ubuntu:~/0x05$ ./100-main.py 2&gt; /dev/null\n89\n-89\nSchool is not an integer\nexa@ubuntu:~/0x05$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>100-safe_print_integer_err.py</code></li> </ul>"},{"location":"Higher-level_programming/Python/0x05-python-exceptions/#8-safe-function","title":"8. Safe function","text":"<p>Write a function that executes a function safely.</p> <ul> <li>Prototype: <code>def safe_function(fct, *args):</code></li> <li>You can assume <code>fct</code> will be always a pointer to a function</li> <li>Returns the result of the function,</li> <li>Otherwise, returns <code>None</code> if something happens during the function and prints in <code>stderr</code> the error precede by <code>Exception:</code></li> <li>You have to use <code>try: / except:</code></li> </ul> <pre><code>exa@ubuntu:~/0x05$ cat 101-main.py\n#!/usr/bin/python3\nsafe_function = __import__('101-safe_function').safe_function\n\n\ndef my_div(a, b):\n    return a / b\n\nresult = safe_function(my_div, 10, 2)\nprint(\"result of my_div: {}\".format(result))\n\nresult = safe_function(my_div, 10, 0)\nprint(\"result of my_div: {}\".format(result))\n\n\ndef print_list(my_list, len):\n    i = 0\n    while i &lt; len:\n        print(my_list[i])\n        i += 1\n    return len\n\nresult = safe_function(print_list, [1, 2, 3, 4], 10)\nprint(\"result of print_list: {}\".format(result))\n\nexa@ubuntu:~/0x05$ ./101-main.py\nresult of my_div: 5.0\nException: division by zero\nresult of my_div: None\n1\n2\n3\n4\nException: list index out of range\nresult of print_list: None\nexa@ubuntu:~/0x05$ ./101-main.py 2&gt; /dev/null\nresult of my_div: 5.0\nresult of my_div: None\n1\n2\n3\n4\nresult of print_list: None\nexa@ubuntu:~/0x05$\n</code></pre> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-Program_Projects</code></li> <li>Directory: <code>0x05-python-exceptions</code></li> <li>File: <code>101-safe_function.py</code></li> </ul>"},{"location":"se_basics/0x01-introduction_to_mindsets/","title":"Overview","text":"<p>In addition to getting your technical tools set up, there\u2019s another tool that\u2019s critical to your success any area of life: growth mindset. Today, you\u2019ll start to better understand what it is and what it isn\u2019t\u2013 and you\u2019ll start to practice using it. First stop is a TED talk by Stanford University professor, Carol Dweck.</p>"},{"location":"se_basics/0x01-introduction_to_mindsets/#resources","title":"Resources :","text":"<ul> <li>Angela Duckworth</li> <li>carol Dweck: Growth Mindset</li> <li>The power of yet</li> </ul>"},{"location":"se_basics/0x01-introduction_to_mindsets/#learning-objectives-include","title":"Learning objectives include :","text":"<ul> <li>What is grit?</li> <li>What evidence is there that grit is important? (Can you briefly describe one study that Duckworth mentions?) (What groups were examined, what was the treatment they received, and what was the result?)</li> <li>What is growth mindset?</li> <li>What is fixed mindset?</li> <li>How do brains behave when they are in fixed vs. growth mindset?</li> <li>What evidence is there that growth mindset is important? You should be able to describe 1 study at a high level: What was the group that was studied? What was the \u201ctreatment\u201d (or variable that the different participants received)? What was the result of that study? (again, high level, no need for small details)</li> </ul>"},{"location":"se_basics/0x02-mental_health_network/","title":"Preserving your mental health &amp; Conquering imposter syndrome","text":"<p>As you dive into this program, you are likely to have different kinds of days. These could be easy days where everything makes sense, hard days where you feel you like crushing your computer because for some reason you don\u2019t understand why your code is working. Other days you just want to quit because it feels you can\u2019t push through the program.</p> <p>Irrespective of the days you have, always remember your mental health is key and important, just by getting started, you can do it and even when you think you can\u2019t continue and you feel your peers are ahead of you, look at your journey and own.</p>"},{"location":"se_basics/0x02-mental_health_network/#resources","title":"Resources","text":"<ul> <li>what is imposter syndrome and how can we combat it</li> <li>Imposter syndrom is bravery</li> <li>you are not an imposter, you are amazing</li> </ul>"},{"location":"se_basics/0x02-mental_health_network/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>What is imposter syndrome?</li> <li>why is it important?</li> <li>How do you deal with imposter syndrome\"</li> </ul>"},{"location":"se_basics/0x02-mental_health_network/#your-network-is-your-net-worth","title":"Your network is your net worth","text":"<p>LinkedIn can be a valuable tool for software engineers looking to build their professional network, find job opportunities, showcase their skills and experience, and stay up-to-date with industry trends and insights.</p> <p>It\u2019s important to start building your LinkedIn professional network as early as possible, so start LinkedIn today!</p>"},{"location":"se_basics/0x02-mental_health_network/#creating-a-professional-linkedin-profile","title":"Creating a professional linkedin profile","text":"<ul> <li>Use a professional profile photo: Your profile photo is the first thing people see when they visit your LinkedIn profile. Make sure it\u2019s a professional headshot that reflects your industry and personal brand. If you do not have a professional headshot (like most of us), simply put a picture of yourself. Here is an article with examples and advice</li> <li>Craft a compelling headline: Your headline should be a brief summary of your professional experience, skills, and expertise. It should make people want to learn more about you. You are allowed to use ChatGPT for this.</li> <li>Write a summary that showcases your strengths: Your summary should highlight your professional strengths, experience, and career goals. It should be well-written and engaging, and it should make people want to connect with you. You are allowed to use ChatGPT for this.</li> <li>Customize your LinkedIn URL: Customizing your LinkedIn URL can make it easier for people to find you and remember your profile. It also looks more professional than the default URL.</li> <li>List your work experience and education: Make sure your work experience and education are up-to-date and complete. Be sure to include any relevant certifications, awards, or achievements.</li> <li>Use keywords: Use keywords throughout your profile to help people find you when they search for specific skills or expertise.</li> <li>Ask for recommendations: Recommendations from colleagues and supervisors can help to validate your skills and experience. Be sure to ask for recommendations from people who know your work well. Overall, a professional-looking LinkedIn profile should be well-written, complete, and engaging. It should showcase your strengths and expertise and make people want to connect with you.</li> </ul>"},{"location":"se_basics/0x03-owning_your_learning/","title":"Owning Your Learning","text":"<p>In any field you get to find yourself, being in charge of your learning journey is what will take you further. This project focuses on concepts that are essential for learning how to learn.</p>"},{"location":"se_basics/0x03-owning_your_learning/#resources","title":"Resources","text":"<ul> <li>The Feynman Learning technique</li> <li>How I tackle projects at ALX (Learn from Firdaus Salim)</li> <li>Focus and diffuse mode of thinking watch</li> <li>Focus and diffuse mode of thinking read</li> </ul>"},{"location":"se_basics/0x03-owning_your_learning/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>What steps do i need to learn how to learn?</li> <li>What is the Feynman learning technique and how can I implement it?</li> <li>What does it mean to own my own learning journey?</li> <li>In what ways can I crack through if I don\u2019t get it?</li> </ul>"},{"location":"se_basics/0x04-map_your_mind/","title":"Map Your Mind","text":"<p>As a Software Engineer, critical thinking is a trait one must have in order to design solutions that solve problems most efficiently. This project unveils the thought process a Software Engineer should have and the processes they could take to solve a problem.</p>"},{"location":"se_basics/0x04-map_your_mind/#resources","title":"Resources","text":"<ul> <li>How to think like a programmer</li> <li>What is Pseudocode</li> <li>what is an algorithm</li> <li>How to write pseudocode</li> <li>Real life examples of pseudocode</li> <li>Practice examples of Pseudocode</li> <li>deepdive</li> <li>More practice examples</li> </ul>"},{"location":"se_basics/0x04-map_your_mind/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>What is a Pseudocode?</li> <li>why is Pseudocoding important in programming?</li> <li>How do you write Pseudocodes?</li> </ul>"},{"location":"se_basics/0x04-map_your_mind/#tasks","title":"Tasks","text":""},{"location":"se_basics/0x04-map_your_mind/#task-0","title":"Task 0","text":"<p>Develop an algorithm that calculates the sum of squares of given input of numbers. You are going to create a flow chart and pseudo code.</p>"},{"location":"se_basics/0x04-map_your_mind/#task-1","title":"Task 1","text":"<p>Develop an algorithm that reads in three numbers and writes them all in sorted order. You are going to create a flow chart and pseudo code.</p>"},{"location":"se_basics/0x04-map_your_mind/#task-2","title":"Task 2","text":"<p>Develop an algorithm that calculates a running sum.</p> <p>A user will enter numbers that will be added to the sum and when a negative number is encountered, stop adding numbers and write out the final result. You are going to create a flow chart and pseudo code.</p> <p>General Tips: - You can make use of an online tool draw.io for designing your flowcharts. - Create the algorithm for each task into a flow chart, save a copy. - Create a folder in google drive named <code>Map your mind</code> and upload your file there. - Create pseudocode in a google doc and upload file to the folder as well. - Make sure you give access to anyone with link for both pseudocode and flowchart files. - Give access to anyone with link to the folder and forward your link to your PyLAMP Program instructor.</p>"},{"location":"se_basics/0x05-shell_navigation/","title":"Shell Navigation","text":"<p><code>Shell</code> <code>Bash</code></p> <p>Shell navigation entails moving around in th file structure of the operating system by using the command line.</p> <p>Commands are used to do this navigation, and depending on type of shell, different set of commands are used.</p> <p>This project explores the world of shell navigation.</p>"},{"location":"se_basics/0x05-shell_navigation/#resources","title":"Resources","text":"<ul> <li>Linux navigation</li> <li>Linux - looking around</li> <li>Linux - manipulating files</li> <li>Linux - /tmp</li> </ul> <p>On your terminal run;</p> <ul> <li><code>man pwd</code></li> <li><code>man ls</code></li> <li><code>man cd</code></li> <li><code>man less</code></li> <li><code>man touch</code></li> <li><code>man cp</code></li> <li><code>man mv</code></li> <li><code>man rm</code></li> <li><code>man mkdir</code></li> <li><code>man rmdir</code></li> </ul>"},{"location":"se_basics/0x05-shell_navigation/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>How to navigate in an Unix system</li> <li>How to list files and directories</li> <li>How to display the content of a file</li> <li>How to create a file or directory</li> <li>How to remove a file or directory</li> <li>How to move or copy a file or directory</li> </ul>"},{"location":"se_basics/0x05-shell_navigation/#tasks","title":"Tasks","text":"<p>Note: - For this project you will not have to push to github, so just enjoy navigating your shell environment and understand how each command works. - For each task do not forget to     - Validate the current directory using <code>pwd</code>.     - Validate the content of the content directory using <code>ls</code></p>"},{"location":"se_basics/0x05-shell_navigation/#0-create","title":"0. Create","text":"<p>Access your Linux terminal and;</p> <ol> <li>Navigate to home <code>~/</code>.</li> <li>Create your working directory <code>shell_navigation/</code></li> <li>Change your working directory to <code>shell_navigation/</code>.</li> <li>Then, create an empty file <code>so_cool</code>.</li> </ol> <p>Tip: Don\u2019t forget to display the list of files of your current directory to validate the creation of the new file.</p>"},{"location":"se_basics/0x05-shell_navigation/#1-create-more","title":"1. Create more!","text":"<p>Access your Linux terminal and;</p> <ol> <li>Change your working directory to <code>shell_navigation/</code>.</li> <li>Create an empty file <code>school</code>.</li> <li>Create folder a new folder <code>academics/</code>.</li> <li>Then, copy the file <code>school</code> to <code>academics/</code>.</li> </ol> <p>Tip: Don\u2019t forget to display the list of files of your current directory to validate the copy of the file.</p>"},{"location":"se_basics/0x05-shell_navigation/#2-rename","title":"2. Rename","text":"<p>Access your Linux terminal and;</p> <ol> <li>Change your working directory to <code>shell_navigation/</code>.</li> <li>Create an empty file <code>old_school</code>.</li> <li>Then, rename the file <code>old_school</code> to <code>new_school</code> (in the same directory).</li> </ol> <p>Tip: Don\u2019t forget to display the list of files of your current directory to validate the renaming of the file.</p>"},{"location":"se_basics/0x05-shell_navigation/#3-create-and-teleport","title":"3. Create and Teleport!","text":"<p>Access your Linux terminal and;</p> <ol> <li>Change your working directory to <code>shell_navigation/</code>.</li> <li>Create an empty file <code>not_here</code>.</li> <li>Create a new directory <code>shell_navigation/academics/right_school</code> while in the current directory.</li> <li>Then, move the file <code>not_here</code> to <code>shell_navigation/academics/right_school</code></li> </ol> <p>Tip: Don\u2019t forget to display the list of files of your current directory to validate the move of the file.</p>"},{"location":"se_basics/0x05-shell_navigation/#4-create-and-remove","title":"4. Create and remove","text":"<p>Access your Linux terminal and</p> <ol> <li>Change your working directory to <code>shell_navigation/</code></li> <li>Create the file <code>ready_to_be_removed</code></li> <li>Then, delete the file <code>ready_to_be_removed</code></li> </ol> <p>Tip: Don\u2019t forget to display the list of files of your current directory to validate the removal of the file.</p>"},{"location":"se_basics/0x05-shell_navigation/#5-create-another","title":"5. Create another","text":"<p>Access your Linux terminal and</p> <ol> <li>Change your working directory to <code>shell_navigation/</code></li> <li>Then, create a directory <code>school_is_amazing/</code></li> </ol> <p>Tip: Don\u2019t forget to display the list of directories of your current directory to validate the creation of the directory.</p>"},{"location":"se_basics/0x05-shell_navigation/#6-create-and-terminate","title":"6. Create and terminate","text":"<p>Access your Linux terminal and</p> <ol> <li>Change your working directory to <code>shell_navigation/</code></li> <li>Create a new directory <code>empty_directory/</code></li> <li>Then, remove the directory <code>empty_directory/</code></li> </ol> <p>Tip: Don\u2019t forget to display the list of directories of your current directory to validate the removal of the directory</p>"},{"location":"se_basics/0x06-emacs/","title":"Emacs","text":"<p>Emacs is a command line text editor that is accessible on the linux terminal.</p>"},{"location":"se_basics/0x06-emacs/#resources","title":"Resources","text":"<ul> <li>A Guided Tour of Emacs</li> </ul>"},{"location":"se_basics/0x06-emacs/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>What is Emacs</li> <li>Who is Richard Stallman</li> <li>How to open and save files</li> <li>What is a buffer and how to switch from one to the other</li> <li>How to use the mark and the point to set the region</li> <li>How to cut and paste lines and regions</li> <li>How to search forward and backward</li> <li>How to invoke commands by name</li> <li>How to undo</li> <li>How to cancel half-entered commands</li> <li>How to quit Emacs</li> </ul>"},{"location":"se_basics/0x06-emacs/#tasks","title":"Tasks","text":""},{"location":"se_basics/0x06-emacs/#task-0","title":"Task 0","text":"<p>Navigate to <code>/root</code> and create a directory named <code>0x02_emacs</code></p>"},{"location":"se_basics/0x06-emacs/#task-1","title":"Task 1","text":"<p>What is the command to open a file from within Emacs? Write the answer into the file <code>/root/0x02_emacs/opening</code>.</p> <p>You can validate if the format of your answer is correct by displaying the file information:</p> <pre><code>root@hex:~# ls -l /root/0x02_emacs/opening\n-rw-r--r-- 1 root root 9 Nov 11 04:34 /root/0x02_emacs/opening\nroot@hex:~#\n</code></pre>"},{"location":"se_basics/0x06-emacs/#task-2","title":"Task 2","text":"<p>What is the command to save a file?</p> <p>Write the answer into the file <code>/root/0x02_emacs/saving</code>.</p>"},{"location":"se_basics/0x06-emacs/#task-3","title":"Task 3","text":"<p>What is the command to cut an entire line?</p> <p>Write the answer into the file <code>/root/0x02_emacs/cutting</code>.</p>"},{"location":"se_basics/0x06-emacs/#task-4","title":"Task 4","text":"<p>What is the command to paste?</p> <p>Write the answer into the file <code>/root/0x02_emacs/pasting</code>.</p>"},{"location":"se_basics/0x06-emacs/#task-5","title":"Task 5","text":"<p>What is the command to search forward?</p> <p>Write the answer into the file <code>/root/0x02_emacs/searching</code>.</p>"},{"location":"se_basics/0x06-emacs/#task-6","title":"Task 6","text":"<p>What is the command to undo?</p> <p>Write the answer into the file <code>/root/0x02_emacs/undoing</code>.</p>"},{"location":"se_basics/0x06-emacs/#task-7","title":"Task 7","text":"<p>What is the command to quit Emacs?</p> <p>Write the answer into the file <code>/root/0x02_emacs/quitting</code>.</p>"},{"location":"se_basics/0x07-vi/","title":"Vi or Vim","text":"<p>Vi is a command line text editor that is accessible on the linux terminal.</p>"},{"location":"se_basics/0x07-vi/#resources","title":"Resources","text":"<ul> <li>Basic vi Commands</li> </ul>"},{"location":"se_basics/0x07-vi/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>What is vi</li> <li>Who is Bill Joy</li> <li>How to start and exit vi</li> <li>What are the command and insert modes, and how to switch from one to the other</li> <li>How to edit text</li> <li>How to cut and paste lines</li> <li>How to search forward and backward</li> <li>How to undo</li> <li>How to quit vi</li> </ul>"},{"location":"se_basics/0x07-vi/#tasks","title":"Tasks","text":""},{"location":"se_basics/0x07-vi/#task-0","title":"Task 0","text":"<p>Navigate to /root and create a directory named <code>0x03_vi</code></p>"},{"location":"se_basics/0x07-vi/#task-1","title":"Task 1","text":"<p>What is the command to insert text before the cursor? Write the answer into the file <code>/root/0x03_vi/inserting</code>.</p> <p>You can validate if the format of your answer is correct by displaying the file information:</p> <pre><code>root@hex:~# ls -l /root/0x03_vi/inserting\n-rw-r--r-- 1 root root 2 Nov 11 04:34 /root/0x03_vi/inserting\nroot@hex:~#\n</code></pre>"},{"location":"se_basics/0x07-vi/#task-2","title":"Task 2","text":"<p>What is the command to delete and cut the current line? Write the answer into the file <code>/root/0x03_vi/cutting</code>.</p> <p>Tips: - How to Copy, Cut and Paste</p>"},{"location":"se_basics/0x07-vi/#task-3","title":"Task 3","text":"<p>What is the command to paste the lines in the buffer into the text after the current line? Write the answer into the file <code>/root/0x03_vi/pasting</code>.</p>"},{"location":"se_basics/0x07-vi/#task-4","title":"Task 4","text":"<p>What is the command to undo what you just did? Write the answer into the file <code>/root/0x03_vi/undoing</code>.</p>"},{"location":"se_basics/0x07-vi/#task-5","title":"Task 5","text":"<p>What is the command to quit vi even though latest changes have not been saved for this vi call? Write the answer into the file <code>/root/0x03_vi/exiting</code>.</p>"},{"location":"se_basics/0x07-vi/#task-6","title":"Task 6","text":"<p>What is the command to move the cursor to the start of the current line? Write the answer into the file <code>/root/0x03_vi/beginning_of_the_line</code>.</p>"},{"location":"se_basics/0x07-vi/#task-7","title":"Task 7","text":"<p>What is the command to move the cursor to the end of the line? Write the answer into the file <code>/root/0x03_vi/end_of_the_line</code>.</p>"},{"location":"se_basics/0x08-git/","title":"0x08. Git","text":"<p><code>Git</code> <code>Code versioning</code> <code>Github</code></p> <p>The use of Git and Github in modern day development for version control places it at the heart of software development, making it a basic neccesity for every Software Developer to embrace. This project dives into Git and Github, have a wonderful time learning how to manage code versions.</p>"},{"location":"se_basics/0x08-git/#resources","title":"Resources","text":"<ul> <li>Resources to learn Git</li> <li>About READMEs</li> <li>How to write a Git commit message</li> <li>Conventional Commits 1</li> <li>Conventional Commits 2</li> </ul>"},{"location":"se_basics/0x08-git/#resources-for-advanced-concepts","title":"Resources for advanced concepts","text":"<ul> <li>Learning branching</li> <li>Effective pull requests and other good practices for teams using GitHub</li> </ul>"},{"location":"se_basics/0x08-git/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>What is source code management</li> <li>What is Git</li> <li>What is GitHub</li> <li>What is the difference between Git and GitHub</li> <li>How to create a repository</li> <li>What is a README</li> <li>How to write good READMEs</li> <li>How to commit</li> <li>How to write helpful commit messages</li> <li>How to push code</li> <li>How to pull updates</li> <li>How to create a branch</li> <li>How to merge branches</li> <li>How to work as collaborators on a project</li> <li>Which files should and which files should not appear in your repo</li> </ul>"},{"location":"se_basics/0x08-git/#general-requirements","title":"General Requirements","text":"<ul> <li>A <code>README.md</code> file at the root of the <code>PyLAMP-zero_day</code> repo, containing a description of the repository</li> <li>A <code>README.md</code> file, at the root of the folder of this project (i.e. 0x08-git), describing what this project is about</li> <li>Do not use GitHub\u2019s web UI, but the command line to perform the exercise (except for operations that can not possibly be done any other way than through the web UI). You won\u2019t be able to perform many of the task requirements on the web UI, and you should start getting used to the command line for simple tasks because many complex tasks can only be done via the command line.</li> <li>Your answer files should only contain the command, and nothing else</li> </ul>"},{"location":"se_basics/0x08-git/#more-info","title":"More Info","text":""},{"location":"se_basics/0x08-git/#install-git","title":"Install <code>git</code>","text":"<p>If <code>git</code> is not already installed on your terminal:</p> <pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install git\n</code></pre>"},{"location":"se_basics/0x08-git/#basic-usage","title":"Basic usage","text":"<p>At the end of this project you should be able to reproduce and understand these command lines:</p> <pre><code>$ git clone &lt;repo&gt;\n$ touch test\n$ git add test\n$ git commit -m \"Initial commit\"\n$ git push origin main\n</code></pre>"},{"location":"se_basics/0x08-git/#tasks","title":"Tasks","text":""},{"location":"se_basics/0x08-git/#0-create-and-setup-your-git-and-github-account","title":"0. Create and setup your Git and GitHub account","text":"<p>Step 0 - Create an account on GitHub [if you do not have one already]</p> <p>You will need a GitHub account for all your projects at the PyLAMP Program. If you do not already have a github.com account, you can create an account for free here.</p> <p>Step 1 - Create a Personal Access Token on Github</p> <p>To have access to your repositories and authenticate yourself, you need to create a Personal Access Token on Github.</p> <p>You can follow this tutorial to create a token.</p> <p>Once it\u2019s created, you should have a token that looks like this:</p> <p>Step 2 - Create your first repository</p> <p>Using the graphic interface on the github website, create your first repository.</p> <ul> <li>Name: <code>PyLAMP-zero_day</code></li> <li>Description: <code>I'm now a PyLAMP Student, this is my first repository as a full-stack engineer</code></li> <li>Public repo</li> <li>No <code>README</code>, <code>.gitignore</code>, or <code>license</code></li> </ul> <p>Step 3 - Clone your repository</p> <p>On your ubuntu, do the following:</p> <ul> <li>Clone your repository</li> </ul> <pre><code>root@896cf839cf9a:~# git clone https://{YOUR_PERSONAL_TOKEN}@github.com/{YOUR_USERNAME}/PyLAMP-zero_day.git\nCloning into 'PyLAMP-zero_day'...\nwarning: You appear to have cloned an empty repository.\n</code></pre> <p>Replace {YOUR_PERSONAL_TOKEN} with your token from step 1</p> <p>Replace {YOUR_USERNAME} with your username from step 0 and 1</p> <p>Step 4 - Create the README.md and push the modifications</p> <ul> <li>Navigate to this new directory. Tips</li> </ul> <pre><code>root@896cf839cf9a:/# cd PyLAMP-zero_day/\nroot@896cf839cf9a:/PyLAMP-zero_day#\n</code></pre> <ul> <li>Create the file <code>README.md</code> with the content <code>My first readme</code>. Tips</li> </ul> <pre><code>root@896cf839cf9a:/PyLAMP-zero_day# echo 'My first readme' &gt; README.md\nroot@896cf839cf9a:/PyLAMP-zero_day# cat README.md\nMy first readme\n</code></pre> <ul> <li>Update your git identity</li> </ul> <pre><code>root@896cf839cf9a:~# git config --global user.email \"you@example.com\"\nroot@896cf839cf9a:~# git config --global user.name \"Your Name\"\n</code></pre> <ul> <li>Add this new file to git, commit the change with this message \u201cMy first commit\u201d and push to the remote server / origin</li> </ul> <pre><code>root@896cf839cf9a:/PyLAMP-zero_day# git add .\nroot@896cf839cf9a:/PyLAMP-zero_day# git commit -m 'My first commit'\n[master (root-commit) 98eef93] My first commit\n 1 file changed, 1 insertion(+)\n create mode 100644 README.md\nroot@896cf839cf9a:/PyLAMP-zero_day# git push\nEnumerating objects: 3, done.\nCounting objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 212 bytes | 212.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0)\nTo https://github.com/{YOUR_USERNAME}/PyLAMP-zero_day.git\n * [new branch]      master -&gt; master\n</code></pre> <p>Good job!</p> <p>You pushed your first file in your first repository of the first task of your first PyLAMP Program project.</p> <p>You can now check your repository on GitHub to see if everything is good.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-zero_day</code></li> <li>File: <code>README.md</code></li> </ul>"},{"location":"se_basics/0x08-git/#1-repo-session","title":"1. Repo-session","text":"<p>Create a new directory called <code>0x08-git</code> in your <code>PyLAMP-zero_day</code> repo.</p> <p>Make sure you include a not empty <code>README.md</code> in your directory:</p> <ul> <li>At the root of your repository <code>PyLAMP-zero_day</code></li> <li>And in the directory <code>0x08-git</code></li> </ul> <p>And importantly: Make sure your commit and push your code to Github</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-zero_day</code></li> <li>Directory: <code>0x08-git</code></li> </ul>"},{"location":"se_basics/0x08-git/#2-coding-fury-road","title":"2. Coding fury road","text":"<p>For the moment we have an empty project directory containing only a <code>README.md</code>. It\u2019s time to code!</p> <ul> <li>Create these directories at the root of your project: <code>bash</code>, <code>c</code>, <code>js</code></li> <li>Create these empty files:<ul> <li><code>c/c_is_fun.c</code></li> <li><code>js/main.js</code></li> <li><code>js/index.js</code></li> </ul> </li> <li>Create a file <code>bash/PyLAMP</code> with these two lines inside: <code>#!/bin/bash</code> and <code>echo \"PyLAMP\"</code></li> <li>Create a file <code>bash/school</code> with these two lines inside: <code>#!/bin/bash</code> and <code>echo \"School\"</code></li> <li>Add all these new files to git</li> <li>Commit your changes (message: \u201cStarting to code today, so cool\u201d) and push to the remote repository</li> </ul> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-zero_day</code></li> <li>Directory: <code>0x08-git</code></li> <li>File:  <code>bash/PyLAMP</code>, <code>bash/school</code>, <code>c/c_is_fun.c</code>, <code>js/main.js</code>, <code>js/index.js</code></li> </ul>"},{"location":"se_basics/0x08-git/#3-collaboration-is-the-base-of-a-company","title":"3. Collaboration is the base of a company","text":"<p>A branch is like a copy of your project. It\u2019s used mainly for:</p> <ul> <li>adding a feature in development</li> <li>collaborating on the same project with other developers</li> <li>not breaking your entire repository</li> <li>not upsetting your co-workers</li> </ul> <p>The purpose of a branch is to isolate your work from the main code base of your project and/or from your co-workers\u2019 work.</p> <p>For this project, create a branch <code>update_script</code> and in this branch:</p> <ul> <li>Create an empty file named <code>bash/98</code></li> <li>Update <code>bash/PyLAMP</code> by replacing echo <code>\"PyLAMP\"</code> with <code>echo \"PyLAMP School\"</code></li> <li>Update <code>bash/school</code> by replacing echo <code>\"School\"</code> with <code>echo \"The school is open!\"</code></li> <li>Add and commit these changes (message: \u201cMy personal work\u201d)</li> <li>Push this new branch Tips</li> </ul> <p>Perfect! You did an amazing update in your project and it\u2019s isolated correctly from the main branch.</p> <p>Ho wait, your manager needs a quick fix in your project and it needs to be deployed now:</p> <ul> <li>Change branch to <code>main</code></li> <li>Update the file <code>bash/PyLAMP</code> by replacing <code>echo \"PyLAMP\"</code> with <code>echo \"PyLAMP School is so cool!\"</code></li> <li>Delete the directory <code>js</code></li> <li>Commit your changes (message: \u201cHot fix\u201d) and push to the origin</li> </ul> <p>Ouf, hot fix is done!</p> <p>Repo: - GitHub repository: <code>PyLAMP-zero_day</code> - Directory: <code>0x08-git</code> - File:   <code>bash/PyLAMP</code>, <code>bash/school</code>, <code>bash/98</code></p>"},{"location":"se_basics/0x08-git/#4-collaboration-be-up-to-date","title":"4. Collaboration: be up to date","text":"<p>Of course, you can also work on the same branch as your co-workers and it\u2019s best if you keep up to date with their changes.</p> <p>For this task \u2013 and only for this task \u2013 please update your file <code>README.md</code> in the main branch from GitHub.com. It\u2019s the only time you are allowed to update and commit from GitHub interface.</p> <p>After you have done that, in your terminal:</p> <ul> <li>Get all changes of the main branch locally (i.e. your <code>README.md</code> file will be updated)</li> <li>Create a new file <code>up_to_date</code> at the root of your directory and in it, write the git command line used</li> <li>Add <code>up_to_date</code> to git, commit (message: \u201cHow to be up to date in git\u201d), and push to the origin</li> </ul> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-zero_day</code></li> <li>Directory: <code>0x08-git</code></li> <li>File: <code>README.md</code>, <code>up_to_date</code></li> </ul>"},{"location":"se_basics/0x08-git/#5-haaa-what-did-you-do","title":"5. HAAA what did you do???","text":"<p>Collaboration is cool, but not really when you update the same file at the same time\u2026</p> <p>To illustrate that, please merge the branch <code>update_script</code> to <code>main</code>: \u201cCool, all my changes will be now part of the main branch, ready to be deployed!\u201d HHHHHHHAAAAAAAA</p> <pre><code>CONFLICT (content): Merge conflict in bash/PyLAMP\n</code></pre> <p>As you can see, you have conflicts between two branches on the same file.</p> <p>Your goal now is to resolve conflicts by using the version of the branch <code>update_script</code>, and push the result to the origin.</p> <p>At the end, you should have all your work from the branch <code>update_script</code> (new file and two updated files) and all latest <code>main</code> commits (new files, delete folder, etc.), without conflicts.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-zero_day</code></li> <li>Directory: <code>0x08-git</code></li> </ul>"},{"location":"se_basics/0x08-git/#6-never-push-too-much","title":"6. Never push too much","text":"<p>Create a <code>.gitignore</code> file and define a rule to never push <code>~</code> files (generated by Emacs). Tips</p> <p>At the end, you should have all your work from the branch <code>update_script</code> (new file and two updated files) and all latest <code>main</code> commits (new files, delete folder, etc.), without conflicts.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>PyLAMP-zero_day</code></li> <li>Directory: <code>0x08-git</code></li> <li>File: <code>.gitignore</code></li> </ul>"},{"location":"se_basics/0x09-markdown/","title":"Overview","text":"<p>Markdown is a lightweight markup language that uses plain text formatting syntax to create formatted documents, making it easy to write and read.</p> <p>It's widely used for blogging, documentation, and other web content creation.</p>"},{"location":"se_basics/0x09-markdown/#resources","title":"Resources :","text":"<p>The resources provided below explain more on the concept of markdown.</p> <ul> <li>A markdown guide</li> </ul>"},{"location":"se_basics/setting_up_your_local_coding_environment/","title":"Setting up your local coding environment","text":"<p><code>DevOps</code> <code>Virtual machine</code></p> <p>Most of the projects in this program are supposed to be done in a Linux (Ubuntu) environment.</p> <p>For that matter, you will need to set up a similar environment for that purpose. This project is therefore a guide for you to set up the necessary coding environment irrespective of the operating system that you are using.</p>"},{"location":"se_basics/setting_up_your_local_coding_environment/#guide-to-running-ubuntu-on-different-operating-systems","title":"Guide to running Ubuntu on different operating systems","text":"<ol> <li> <p>For Windows You have three options for running Ubuntu on Windows:</p> </li> <li> <p>WSL: <code>WSL (Windows Subsystem for Linux)</code> is a feature that allows you to run Linux distributions natively on Windows. WSL is the easiest option to set up and use, and it provides a good introduction to Ubuntu.</p> </li> <li> <p>Vagrant: <code>Vagrant</code> is a tool for creating and managing virtual machines. It is a good option if you need to run Ubuntu for development or testing purposes, as it allows you to create isolated environments that are easy to replicate and share.</p> </li> <li> <p>Docker: <code>Docker</code> is a tool for containerizing applications. It is a good option if you need to run Ubuntu for specific tasks, such as running a web server or database. But also remember using docker will need an installation of WSL.</p> </li> <li> <p>For macOS If you have:</p> </li> <li> <p>a Mac with an Apple Silicon chip, you can only use Docker to run <code>Ubuntu</code>.</p> </li> <li>a Mac with an Intel chip, you can use <code>Vagrant</code> or <code>Docker</code>.</li> </ol>"},{"location":"se_basics/setting_up_your_local_coding_environment/#resources","title":"Resources","text":"<ul> <li>Virtual Machine</li> <li>man uname</li> <li>Guide to install WSL and Ubuntu on Windows</li> </ul>"},{"location":"se_basics/setting_up_your_local_coding_environment/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>What is a virtual machine</li> <li>What is Vagrant</li> <li>Who wrote Vagrant</li> <li>What is Ubuntu</li> <li>What does \u201cUbuntu\u201d mean</li> <li>How to use VMs with Vagrant</li> <li>What does the command <code>uname</code> do</li> </ul>"},{"location":"se_basics/setting_up_your_local_coding_environment/#general-requirements","title":"General Requirements","text":"<ul> <li>A <code>README.md</code> file at the root of the repo, containing a description of the repository.</li> <li>A <code>README.md</code> file, at the root of the folder of this project (i.e. <code>0x00-wsl</code>), describing what this project is about.</li> </ul>"},{"location":"se_basics/setting_up_your_local_coding_environment/#more-info","title":"More Info","text":""},{"location":"se_basics/setting_up_your_local_coding_environment/#install-git","title":"Install <code>git</code>","text":"<p>If <code>git</code> is not already installed on your terminal:</p> <pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install git\n</code></pre>"},{"location":"se_basics/setting_up_your_local_coding_environment/#basic-usage","title":"Basic usage","text":"<p>At the end of this project you should be able to reproduce and understand these command lines:</p> <pre><code>$ git clone &lt;repo&gt;\n$ touch test\n$ git add test\n$ git commit -m \"Initial commit\"\n$ git push origin main\n</code></pre>"},{"location":"se_basics/setting_up_your_local_coding_environment/#tasks","title":"Tasks","text":""},{"location":"se_basics/setting_up_your_local_coding_environment/#0-create-and-setup-your-git-and-github-account","title":"0. Create and setup your Git and GitHub account","text":"<ul> <li> <p>You will need Git for this project, you might have to install it on your computer if it\u2019s not done yet.</p> </li> <li> <p>Configure your basic info (name, email) on your local machine \u2013 they will be part of your commits. Tips</p> </li> </ul> <p>On GitHub.com:</p> <ul> <li> <p>You will need a GitHub account for this project.If you do not already have a github.com account, you can create an account for free here.</p> </li> <li> <p>Using the graphic interface on the website, create the repository (if it\u2019s not done yet)</p> <ul> <li>Description: <code>This is my first repository as a full-stack engineer</code></li> <li>Public repo: <code>zero_day</code></li> <li>No <code>README</code>, <code>.gitignore</code>, or <code>license</code></li> </ul> </li> </ul> <p>On your computer, open a terminal and do the following:</p> <ul> <li>Navigate to your home directory. Tips</li> <li>Create a directory <code>zero_day</code>. Tips</li> <li>Navigate to this new directory. Tips</li> <li>Initialize git and add the remote origin</li> <li>Create a file <code>README.md</code> with Vi (or other command line editors) and write a small Markdown text to present this project. This file is mandatory in projects</li> <li>Add this new file to git, commit the change with this message \u201cMy first commit\u201d and push to the remote server / origin (Note: You will probably need to set your login/password to push to the remote server) Good job!</li> </ul> <p>You pushed your first file in your first repository of the first task of your first PyLAMP Program project.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>zero_day</code></li> <li>File: <code>README.md</code></li> </ul>"},{"location":"se_basics/setting_up_your_local_coding_environment/#1-hello-ubuntu","title":"1. Hello Ubuntu","text":"<p>Inside the <code>zero_day</code> repo, create a new directory called <code>0x00-wsl</code>. Add a <code>README.md</code> file to this directory.</p> <p>On Ubuntu in your wsl. What does the command <code>uname</code> print when you run it without any option?</p> <p>Type your answer into a file in the <code>0x00-wsl</code> directory and push it to <code>GitHub</code>. Name your file accordingly as shown below.</p> <p>Repo:</p> <ul> <li>GitHub repository: <code>zero_day</code></li> <li>Directory: <code>0x00-wsl</code></li> <li>File: <code>0-hello_ubuntu</code></li> </ul>"}]}